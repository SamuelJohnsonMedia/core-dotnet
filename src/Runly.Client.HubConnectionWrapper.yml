### YamlMime:ManagedReference
items:
- uid: Runly.Client.HubConnectionWrapper
  commentId: T:Runly.Client.HubConnectionWrapper
  id: HubConnectionWrapper
  parent: Runly.Client
  children:
  - Runly.Client.HubConnectionWrapper.#ctor(HubConnection)
  - Runly.Client.HubConnectionWrapper.Closed
  - Runly.Client.HubConnectionWrapper.DisposeAsync
  - Runly.Client.HubConnectionWrapper.InvokeCoreAsync(System.String,System.Object[])
  - Runly.Client.HubConnectionWrapper.On(System.String,Action)
  - Runly.Client.HubConnectionWrapper.Reconnected
  - Runly.Client.HubConnectionWrapper.Reconnecting
  - Runly.Client.HubConnectionWrapper.SendCoreAsync(System.String,System.Object[])
  - Runly.Client.HubConnectionWrapper.StartAsync
  - Runly.Client.HubConnectionWrapper.State
  langs:
  - csharp
  - vb
  name: HubConnectionWrapper
  nameWithType: HubConnectionWrapper
  fullName: Runly.Client.HubConnectionWrapper
  type: Class
  source:
    id: HubConnectionWrapper
    path: /github/workspace/src/Runly/Client/ResultsChannel.cs
    startLine: 470
  assemblies:
  - Runly
  namespace: Runly.Client
  summary: "\nWraps a SignalR <see cref=\"!:HubConnection\"></see> in the testable interface <xref href=\"Runly.Client.IResultsConnection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public class HubConnectionWrapper : object, IResultsConnection, IAsyncDisposable'
    content.vb: >-
      Public Class HubConnectionWrapper
          Inherits Object
          Implements IResultsConnection, IAsyncDisposable
  inheritance:
  - System.Object
  implements:
  - Runly.Client.IResultsConnection
  - IAsyncDisposable
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Runly.Client.HubConnectionWrapper.#ctor(HubConnection)
  commentId: M:Runly.Client.HubConnectionWrapper.#ctor(HubConnection)
  id: '#ctor(HubConnection)'
  parent: Runly.Client.HubConnectionWrapper
  langs:
  - csharp
  - vb
  name: HubConnectionWrapper(HubConnection)
  nameWithType: HubConnectionWrapper.HubConnectionWrapper(HubConnection)
  fullName: Runly.Client.HubConnectionWrapper.HubConnectionWrapper(HubConnection)
  type: Constructor
  source:
    id: .ctor
    path: /github/workspace/src/Runly/Client/ResultsChannel.cs
    startLine: 478
  assemblies:
  - Runly
  namespace: Runly.Client
  summary: "\nInitializes a new <xref href=\"Runly.Client.HubConnectionWrapper\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public HubConnectionWrapper(HubConnection connection)
    parameters:
    - id: connection
      type: HubConnection
      description: ''
    content.vb: Public Sub New(connection As HubConnection)
  overload: Runly.Client.HubConnectionWrapper.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Runly.Client.HubConnectionWrapper.Closed
  commentId: E:Runly.Client.HubConnectionWrapper.Closed
  id: Closed
  parent: Runly.Client.HubConnectionWrapper
  langs:
  - csharp
  - vb
  name: Closed
  nameWithType: HubConnectionWrapper.Closed
  fullName: Runly.Client.HubConnectionWrapper.Closed
  type: Event
  source:
    id: Closed
    path: /github/workspace/src/Runly/Client/ResultsChannel.cs
    startLine: 494
  assemblies:
  - Runly
  namespace: Runly.Client
  summary: "\nOccurs when the connection is closed. The connection could be closed due to an\nerror or due to either the server or client intentionally closing the connection\nwithout error.\n"
  remarks: "\nIf this event was triggered from a connection error, the System.Exception that\noccurred will be passed in as the sole argument to this handler.If this event\nwas triggered intentionally by either the client or server, then the argument\nwill be null.\n"
  example: []
  syntax:
    content: public event Func<Exception, Task> Closed
    return:
      type: Func{Exception,Task}
    content.vb: Public Event Closed As Func(Of Exception, Task)
  implements:
  - Runly.Client.IResultsConnection.Closed
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Runly.Client.HubConnectionWrapper.Reconnected
  commentId: E:Runly.Client.HubConnectionWrapper.Reconnected
  id: Reconnected
  parent: Runly.Client.HubConnectionWrapper
  langs:
  - csharp
  - vb
  name: Reconnected
  nameWithType: HubConnectionWrapper.Reconnected
  fullName: Runly.Client.HubConnectionWrapper.Reconnected
  type: Event
  source:
    id: Reconnected
    path: /github/workspace/src/Runly/Client/ResultsChannel.cs
    startLine: 508
  assemblies:
  - Runly
  namespace: Runly.Client
  summary: "\nOccurs when the Microsoft.AspNetCore.SignalR.Client.HubConnection successfully\nreconnects after losing its underlying connection.\n"
  remarks: "\nThe System.String parameter will be the Microsoft.AspNetCore.SignalR.Client.HubConnection&apos;s\nnew ConnectionId or null if negotiation was skipped.\n"
  example: []
  syntax:
    content: public event Func<string, Task> Reconnected
    return:
      type: Func{System.String,Task}
    content.vb: Public Event Reconnected As Func(Of String, Task)
  implements:
  - Runly.Client.IResultsConnection.Reconnected
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Runly.Client.HubConnectionWrapper.Reconnecting
  commentId: E:Runly.Client.HubConnectionWrapper.Reconnecting
  id: Reconnecting
  parent: Runly.Client.HubConnectionWrapper
  langs:
  - csharp
  - vb
  name: Reconnecting
  nameWithType: HubConnectionWrapper.Reconnecting
  fullName: Runly.Client.HubConnectionWrapper.Reconnecting
  type: Event
  source:
    id: Reconnecting
    path: /github/workspace/src/Runly/Client/ResultsChannel.cs
    startLine: 522
  assemblies:
  - Runly
  namespace: Runly.Client
  summary: "\nOccurs when the Microsoft.AspNetCore.SignalR.Client.HubConnection starts reconnecting\nafter losing its underlying connection.\n"
  remarks: "\nThe System.Exception that occurred will be passed in as the sole argument to\nthis handler.\n"
  example: []
  syntax:
    content: public event Func<Exception, Task> Reconnecting
    return:
      type: Func{Exception,Task}
    content.vb: Public Event Reconnecting As Func(Of Exception, Task)
  implements:
  - Runly.Client.IResultsConnection.Reconnecting
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Runly.Client.HubConnectionWrapper.State
  commentId: P:Runly.Client.HubConnectionWrapper.State
  id: State
  parent: Runly.Client.HubConnectionWrapper
  langs:
  - csharp
  - vb
  name: State
  nameWithType: HubConnectionWrapper.State
  fullName: Runly.Client.HubConnectionWrapper.State
  type: Property
  source:
    id: State
    path: /github/workspace/src/Runly/Client/ResultsChannel.cs
    startLine: 531
  assemblies:
  - Runly
  namespace: Runly.Client
  summary: "\nIndicates the state of the <see cref=\"!:HubConnection\"></see> to the server.\n"
  example: []
  syntax:
    content: public HubConnectionState State { get; }
    parameters: []
    return:
      type: HubConnectionState
    content.vb: Public ReadOnly Property State As HubConnectionState
  overload: Runly.Client.HubConnectionWrapper.State*
  implements:
  - Runly.Client.IResultsConnection.State
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Runly.Client.HubConnectionWrapper.DisposeAsync
  commentId: M:Runly.Client.HubConnectionWrapper.DisposeAsync
  id: DisposeAsync
  parent: Runly.Client.HubConnectionWrapper
  langs:
  - csharp
  - vb
  name: DisposeAsync()
  nameWithType: HubConnectionWrapper.DisposeAsync()
  fullName: Runly.Client.HubConnectionWrapper.DisposeAsync()
  type: Method
  source:
    id: DisposeAsync
    path: /github/workspace/src/Runly/Client/ResultsChannel.cs
    startLine: 536
  assemblies:
  - Runly
  namespace: Runly.Client
  summary: "\nDisposes the <xref href=\"Runly.Client.HubConnectionWrapper\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ValueTask DisposeAsync()
    return:
      type: ValueTask
    content.vb: Public Function DisposeAsync As ValueTask
  overload: Runly.Client.HubConnectionWrapper.DisposeAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Runly.Client.HubConnectionWrapper.StartAsync
  commentId: M:Runly.Client.HubConnectionWrapper.StartAsync
  id: StartAsync
  parent: Runly.Client.HubConnectionWrapper
  langs:
  - csharp
  - vb
  name: StartAsync()
  nameWithType: HubConnectionWrapper.StartAsync()
  fullName: Runly.Client.HubConnectionWrapper.StartAsync()
  type: Method
  source:
    id: StartAsync
    path: /github/workspace/src/Runly/Client/ResultsChannel.cs
    startLine: 545
  assemblies:
  - Runly
  namespace: Runly.Client
  summary: "\nStarts a connetion to the server.\n"
  example: []
  syntax:
    content: public Task StartAsync()
    return:
      type: Task
    content.vb: Public Function StartAsync As Task
  overload: Runly.Client.HubConnectionWrapper.StartAsync*
  implements:
  - Runly.Client.IResultsConnection.StartAsync
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Runly.Client.HubConnectionWrapper.InvokeCoreAsync(System.String,System.Object[])
  commentId: M:Runly.Client.HubConnectionWrapper.InvokeCoreAsync(System.String,System.Object[])
  id: InvokeCoreAsync(System.String,System.Object[])
  parent: Runly.Client.HubConnectionWrapper
  langs:
  - csharp
  - vb
  name: InvokeCoreAsync(String, Object[])
  nameWithType: HubConnectionWrapper.InvokeCoreAsync(String, Object[])
  fullName: Runly.Client.HubConnectionWrapper.InvokeCoreAsync(System.String, System.Object[])
  type: Method
  source:
    id: InvokeCoreAsync
    path: /github/workspace/src/Runly/Client/ResultsChannel.cs
    startLine: 552
  assemblies:
  - Runly
  namespace: Runly.Client
  summary: "\nInvokes a hub method on the server.\n"
  example: []
  syntax:
    content: public Task InvokeCoreAsync(string methodName, object[] args)
    parameters:
    - id: methodName
      type: System.String
      description: The name of the server method to invoke.
    - id: args
      type: System.Object[]
      description: The arguments used to invoke the server method.
    return:
      type: Task
    content.vb: Public Function InvokeCoreAsync(methodName As String, args As Object()) As Task
  overload: Runly.Client.HubConnectionWrapper.InvokeCoreAsync*
  implements:
  - Runly.Client.IResultsConnection.InvokeCoreAsync(System.String,System.Object[])
  nameWithType.vb: HubConnectionWrapper.InvokeCoreAsync(String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Runly.Client.HubConnectionWrapper.InvokeCoreAsync(System.String, System.Object())
  name.vb: InvokeCoreAsync(String, Object())
- uid: Runly.Client.HubConnectionWrapper.SendCoreAsync(System.String,System.Object[])
  commentId: M:Runly.Client.HubConnectionWrapper.SendCoreAsync(System.String,System.Object[])
  id: SendCoreAsync(System.String,System.Object[])
  parent: Runly.Client.HubConnectionWrapper
  langs:
  - csharp
  - vb
  name: SendCoreAsync(String, Object[])
  nameWithType: HubConnectionWrapper.SendCoreAsync(String, Object[])
  fullName: Runly.Client.HubConnectionWrapper.SendCoreAsync(System.String, System.Object[])
  type: Method
  source:
    id: SendCoreAsync
    path: /github/workspace/src/Runly/Client/ResultsChannel.cs
    startLine: 559
  assemblies:
  - Runly
  namespace: Runly.Client
  summary: "\nInvokes a hub method on the server. Does not wait to a response from the receiver.\n"
  example: []
  syntax:
    content: public Task SendCoreAsync(string methodName, object[] args)
    parameters:
    - id: methodName
      type: System.String
      description: The name of the server method to invoke.
    - id: args
      type: System.Object[]
      description: The arguments used to invoke the server method.
    return:
      type: Task
    content.vb: Public Function SendCoreAsync(methodName As String, args As Object()) As Task
  overload: Runly.Client.HubConnectionWrapper.SendCoreAsync*
  implements:
  - Runly.Client.IResultsConnection.SendCoreAsync(System.String,System.Object[])
  nameWithType.vb: HubConnectionWrapper.SendCoreAsync(String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Runly.Client.HubConnectionWrapper.SendCoreAsync(System.String, System.Object())
  name.vb: SendCoreAsync(String, Object())
- uid: Runly.Client.HubConnectionWrapper.On(System.String,Action)
  commentId: M:Runly.Client.HubConnectionWrapper.On(System.String,Action)
  id: On(System.String,Action)
  parent: Runly.Client.HubConnectionWrapper
  langs:
  - csharp
  - vb
  name: On(String, Action)
  nameWithType: HubConnectionWrapper.On(String, Action)
  fullName: Runly.Client.HubConnectionWrapper.On(System.String, Action)
  type: Method
  source:
    id: On
    path: /github/workspace/src/Runly/Client/ResultsChannel.cs
    startLine: 566
  assemblies:
  - Runly
  namespace: Runly.Client
  summary: "\nRegisters a handler that will be invoked when the hub method with the specified name is invoked.\n"
  example: []
  syntax:
    content: public IDisposable On(string methodName, Action handler)
    parameters:
    - id: methodName
      type: System.String
      description: The name of the hub method to define.
    - id: handler
      type: Action
      description: The handler that will be raised when the hub method is invoked.
    return:
      type: IDisposable
    content.vb: Public Function On(methodName As String, handler As Action) As IDisposable
  overload: Runly.Client.HubConnectionWrapper.On*
  implements:
  - Runly.Client.IResultsConnection.On(System.String,Action)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Runly.Client.IResultsConnection
  commentId: T:Runly.Client.IResultsConnection
  parent: Runly.Client
  name: IResultsConnection
  nameWithType: IResultsConnection
  fullName: Runly.Client.IResultsConnection
- uid: Runly.Client
  commentId: N:Runly.Client
  name: Runly.Client
  nameWithType: Runly.Client
  fullName: Runly.Client
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: IAsyncDisposable
  commentId: '!:IAsyncDisposable'
  isExternal: true
  name: IAsyncDisposable
  nameWithType: IAsyncDisposable
  fullName: IAsyncDisposable
- uid: Runly.Client.HubConnectionWrapper
  commentId: T:Runly.Client.HubConnectionWrapper
  name: HubConnectionWrapper
  nameWithType: HubConnectionWrapper
  fullName: Runly.Client.HubConnectionWrapper
- uid: Runly.Client.HubConnectionWrapper.#ctor*
  commentId: Overload:Runly.Client.HubConnectionWrapper.#ctor
  name: HubConnectionWrapper
  nameWithType: HubConnectionWrapper.HubConnectionWrapper
  fullName: Runly.Client.HubConnectionWrapper.HubConnectionWrapper
- uid: HubConnection
  commentId: '!:HubConnection'
  isExternal: true
  name: HubConnection
  nameWithType: HubConnection
  fullName: HubConnection
- uid: Runly.Client.IResultsConnection.Closed
  commentId: E:Runly.Client.IResultsConnection.Closed
  parent: Runly.Client.IResultsConnection
  name: Closed
  nameWithType: IResultsConnection.Closed
  fullName: Runly.Client.IResultsConnection.Closed
- uid: Func{Exception,Task}
  commentId: '!:Func{Exception,Task}'
  definition: Func`2
  name: Func<Exception, Task>
  nameWithType: Func<Exception, Task>
  fullName: Func<Exception, Task>
  nameWithType.vb: Func(Of Exception, Task)
  fullName.vb: Func(Of Exception, Task)
  name.vb: Func(Of Exception, Task)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Runly.Client.IResultsConnection.Reconnected
  commentId: E:Runly.Client.IResultsConnection.Reconnected
  parent: Runly.Client.IResultsConnection
  name: Reconnected
  nameWithType: IResultsConnection.Reconnected
  fullName: Runly.Client.IResultsConnection.Reconnected
- uid: Func{System.String,Task}
  commentId: '!:Func{System.String,Task}'
  definition: Func`2
  name: Func<String, Task>
  nameWithType: Func<String, Task>
  fullName: Func<System.String, Task>
  nameWithType.vb: Func(Of String, Task)
  fullName.vb: Func(Of System.String, Task)
  name.vb: Func(Of String, Task)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Runly.Client.IResultsConnection.Reconnecting
  commentId: E:Runly.Client.IResultsConnection.Reconnecting
  parent: Runly.Client.IResultsConnection
  name: Reconnecting
  nameWithType: IResultsConnection.Reconnecting
  fullName: Runly.Client.IResultsConnection.Reconnecting
- uid: Runly.Client.HubConnectionWrapper.State*
  commentId: Overload:Runly.Client.HubConnectionWrapper.State
  name: State
  nameWithType: HubConnectionWrapper.State
  fullName: Runly.Client.HubConnectionWrapper.State
- uid: Runly.Client.IResultsConnection.State
  commentId: P:Runly.Client.IResultsConnection.State
  parent: Runly.Client.IResultsConnection
  name: State
  nameWithType: IResultsConnection.State
  fullName: Runly.Client.IResultsConnection.State
- uid: HubConnectionState
  isExternal: true
  name: HubConnectionState
  nameWithType: HubConnectionState
  fullName: HubConnectionState
- uid: Runly.Client.HubConnectionWrapper.DisposeAsync*
  commentId: Overload:Runly.Client.HubConnectionWrapper.DisposeAsync
  name: DisposeAsync
  nameWithType: HubConnectionWrapper.DisposeAsync
  fullName: Runly.Client.HubConnectionWrapper.DisposeAsync
- uid: ValueTask
  isExternal: true
  name: ValueTask
  nameWithType: ValueTask
  fullName: ValueTask
- uid: Runly.Client.HubConnectionWrapper.StartAsync*
  commentId: Overload:Runly.Client.HubConnectionWrapper.StartAsync
  name: StartAsync
  nameWithType: HubConnectionWrapper.StartAsync
  fullName: Runly.Client.HubConnectionWrapper.StartAsync
- uid: Runly.Client.IResultsConnection.StartAsync
  commentId: M:Runly.Client.IResultsConnection.StartAsync
  parent: Runly.Client.IResultsConnection
  name: StartAsync()
  nameWithType: IResultsConnection.StartAsync()
  fullName: Runly.Client.IResultsConnection.StartAsync()
  spec.csharp:
  - uid: Runly.Client.IResultsConnection.StartAsync
    name: StartAsync
    nameWithType: IResultsConnection.StartAsync
    fullName: Runly.Client.IResultsConnection.StartAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Runly.Client.IResultsConnection.StartAsync
    name: StartAsync
    nameWithType: IResultsConnection.StartAsync
    fullName: Runly.Client.IResultsConnection.StartAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: Runly.Client.HubConnectionWrapper.InvokeCoreAsync*
  commentId: Overload:Runly.Client.HubConnectionWrapper.InvokeCoreAsync
  name: InvokeCoreAsync
  nameWithType: HubConnectionWrapper.InvokeCoreAsync
  fullName: Runly.Client.HubConnectionWrapper.InvokeCoreAsync
- uid: Runly.Client.IResultsConnection.InvokeCoreAsync(System.String,System.Object[])
  commentId: M:Runly.Client.IResultsConnection.InvokeCoreAsync(System.String,System.Object[])
  parent: Runly.Client.IResultsConnection
  isExternal: true
  name: InvokeCoreAsync(String, Object[])
  nameWithType: IResultsConnection.InvokeCoreAsync(String, Object[])
  fullName: Runly.Client.IResultsConnection.InvokeCoreAsync(System.String, System.Object[])
  nameWithType.vb: IResultsConnection.InvokeCoreAsync(String, Object())
  fullName.vb: Runly.Client.IResultsConnection.InvokeCoreAsync(System.String, System.Object())
  name.vb: InvokeCoreAsync(String, Object())
  spec.csharp:
  - uid: Runly.Client.IResultsConnection.InvokeCoreAsync(System.String,System.Object[])
    name: InvokeCoreAsync
    nameWithType: IResultsConnection.InvokeCoreAsync
    fullName: Runly.Client.IResultsConnection.InvokeCoreAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Runly.Client.IResultsConnection.InvokeCoreAsync(System.String,System.Object[])
    name: InvokeCoreAsync
    nameWithType: IResultsConnection.InvokeCoreAsync
    fullName: Runly.Client.IResultsConnection.InvokeCoreAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Runly.Client.HubConnectionWrapper.SendCoreAsync*
  commentId: Overload:Runly.Client.HubConnectionWrapper.SendCoreAsync
  name: SendCoreAsync
  nameWithType: HubConnectionWrapper.SendCoreAsync
  fullName: Runly.Client.HubConnectionWrapper.SendCoreAsync
- uid: Runly.Client.IResultsConnection.SendCoreAsync(System.String,System.Object[])
  commentId: M:Runly.Client.IResultsConnection.SendCoreAsync(System.String,System.Object[])
  parent: Runly.Client.IResultsConnection
  isExternal: true
  name: SendCoreAsync(String, Object[])
  nameWithType: IResultsConnection.SendCoreAsync(String, Object[])
  fullName: Runly.Client.IResultsConnection.SendCoreAsync(System.String, System.Object[])
  nameWithType.vb: IResultsConnection.SendCoreAsync(String, Object())
  fullName.vb: Runly.Client.IResultsConnection.SendCoreAsync(System.String, System.Object())
  name.vb: SendCoreAsync(String, Object())
  spec.csharp:
  - uid: Runly.Client.IResultsConnection.SendCoreAsync(System.String,System.Object[])
    name: SendCoreAsync
    nameWithType: IResultsConnection.SendCoreAsync
    fullName: Runly.Client.IResultsConnection.SendCoreAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Runly.Client.IResultsConnection.SendCoreAsync(System.String,System.Object[])
    name: SendCoreAsync
    nameWithType: IResultsConnection.SendCoreAsync
    fullName: Runly.Client.IResultsConnection.SendCoreAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Runly.Client.HubConnectionWrapper.On*
  commentId: Overload:Runly.Client.HubConnectionWrapper.On
  name: On
  nameWithType: HubConnectionWrapper.On
  fullName: Runly.Client.HubConnectionWrapper.On
- uid: Runly.Client.IResultsConnection.On(System.String,Action)
  commentId: M:Runly.Client.IResultsConnection.On(System.String,Action)
  parent: Runly.Client.IResultsConnection
  isExternal: true
  name: On(String, Action)
  nameWithType: IResultsConnection.On(String, Action)
  fullName: Runly.Client.IResultsConnection.On(System.String, Action)
  spec.csharp:
  - uid: Runly.Client.IResultsConnection.On(System.String,Action)
    name: On
    nameWithType: IResultsConnection.On
    fullName: Runly.Client.IResultsConnection.On
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Action
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Runly.Client.IResultsConnection.On(System.String,Action)
    name: On
    nameWithType: IResultsConnection.On
    fullName: Runly.Client.IResultsConnection.On
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Action
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Action
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: Action
- uid: IDisposable
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: IDisposable
