### YamlMime:ManagedReference
items:
- uid: Runly.Client.IResultsConnection
  commentId: T:Runly.Client.IResultsConnection
  id: IResultsConnection
  parent: Runly.Client
  children:
  - Runly.Client.IResultsConnection.Closed
  - Runly.Client.IResultsConnection.InvokeCoreAsync(System.String,System.Object[])
  - Runly.Client.IResultsConnection.On(System.String,Action)
  - Runly.Client.IResultsConnection.Reconnected
  - Runly.Client.IResultsConnection.Reconnecting
  - Runly.Client.IResultsConnection.SendCoreAsync(System.String,System.Object[])
  - Runly.Client.IResultsConnection.StartAsync
  - Runly.Client.IResultsConnection.State
  langs:
  - csharp
  - vb
  name: IResultsConnection
  nameWithType: IResultsConnection
  fullName: Runly.Client.IResultsConnection
  type: Interface
  source:
    id: IResultsConnection
    path: /github/workspace/src/Runly/Client/ResultsChannel.cs
    startLine: 400
  assemblies:
  - Runly
  namespace: Runly.Client
  summary: "\nAn interface to make the SignalR <see cref=\"!:HubConnection\"></see> testable.\n"
  example: []
  syntax:
    content: 'public interface IResultsConnection : IAsyncDisposable'
    content.vb: >-
      Public Interface IResultsConnection
          Inherits IAsyncDisposable
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Runly.Client.IResultsConnection.Closed
  commentId: E:Runly.Client.IResultsConnection.Closed
  id: Closed
  parent: Runly.Client.IResultsConnection
  langs:
  - csharp
  - vb
  name: Closed
  nameWithType: IResultsConnection.Closed
  fullName: Runly.Client.IResultsConnection.Closed
  type: Event
  source:
    id: Closed
    path: /github/workspace/src/Runly/Client/ResultsChannel.cs
    startLine: 413
  assemblies:
  - Runly
  namespace: Runly.Client
  summary: "\nOccurs when the connection is closed. The connection could be closed due to an\nerror or due to either the server or client intentionally closing the connection\nwithout error.\n"
  remarks: "\nIf this event was triggered from a connection error, the System.Exception that\noccurred will be passed in as the sole argument to this handler.If this event\nwas triggered intentionally by either the client or server, then the argument\nwill be null.\n"
  example: []
  syntax:
    content: event Func<Exception, Task> Closed
    return:
      type: Func{Exception,Task}
    content.vb: Event Closed As Func(Of Exception, Task)
- uid: Runly.Client.IResultsConnection.Reconnected
  commentId: E:Runly.Client.IResultsConnection.Reconnected
  id: Reconnected
  parent: Runly.Client.IResultsConnection
  langs:
  - csharp
  - vb
  name: Reconnected
  nameWithType: IResultsConnection.Reconnected
  fullName: Runly.Client.IResultsConnection.Reconnected
  type: Event
  source:
    id: Reconnected
    path: /github/workspace/src/Runly/Client/ResultsChannel.cs
    startLine: 423
  assemblies:
  - Runly
  namespace: Runly.Client
  summary: "\nOccurs when the Microsoft.AspNetCore.SignalR.Client.HubConnection starts reconnecting\nafter losing its underlying connection.\n"
  remarks: "\nThe System.Exception that occurred will be passed in as the sole argument to\nthis handler.\n"
  example: []
  syntax:
    content: event Func<string, Task> Reconnected
    return:
      type: Func{System.String,Task}
    content.vb: Event Reconnected As Func(Of String, Task)
- uid: Runly.Client.IResultsConnection.Reconnecting
  commentId: E:Runly.Client.IResultsConnection.Reconnecting
  id: Reconnecting
  parent: Runly.Client.IResultsConnection
  langs:
  - csharp
  - vb
  name: Reconnecting
  nameWithType: IResultsConnection.Reconnecting
  fullName: Runly.Client.IResultsConnection.Reconnecting
  type: Event
  source:
    id: Reconnecting
    path: /github/workspace/src/Runly/Client/ResultsChannel.cs
    startLine: 433
  assemblies:
  - Runly
  namespace: Runly.Client
  summary: "\nOccurs when the Microsoft.AspNetCore.SignalR.Client.HubConnection starts reconnecting\nafter losing its underlying connection.\n"
  remarks: "\nThe System.Exception that occurred will be passed in as the sole argument to\nthis handler.\n"
  example: []
  syntax:
    content: event Func<Exception, Task> Reconnecting
    return:
      type: Func{Exception,Task}
    content.vb: Event Reconnecting As Func(Of Exception, Task)
- uid: Runly.Client.IResultsConnection.State
  commentId: P:Runly.Client.IResultsConnection.State
  id: State
  parent: Runly.Client.IResultsConnection
  langs:
  - csharp
  - vb
  name: State
  nameWithType: IResultsConnection.State
  fullName: Runly.Client.IResultsConnection.State
  type: Property
  source:
    id: State
    path: /github/workspace/src/Runly/Client/ResultsChannel.cs
    startLine: 438
  assemblies:
  - Runly
  namespace: Runly.Client
  summary: "\nIndicates the state of the <see cref=\"!:HubConnection\"></see> to the server.\n"
  example: []
  syntax:
    content: HubConnectionState State { get; }
    parameters: []
    return:
      type: HubConnectionState
    content.vb: ReadOnly Property State As HubConnectionState
  overload: Runly.Client.IResultsConnection.State*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Runly.Client.IResultsConnection.StartAsync
  commentId: M:Runly.Client.IResultsConnection.StartAsync
  id: StartAsync
  parent: Runly.Client.IResultsConnection
  langs:
  - csharp
  - vb
  name: StartAsync()
  nameWithType: IResultsConnection.StartAsync()
  fullName: Runly.Client.IResultsConnection.StartAsync()
  type: Method
  source:
    id: StartAsync
    path: /github/workspace/src/Runly/Client/ResultsChannel.cs
    startLine: 443
  assemblies:
  - Runly
  namespace: Runly.Client
  summary: "\nStarts a connetion to the server.\n"
  example: []
  syntax:
    content: Task StartAsync()
    return:
      type: Task
    content.vb: Function StartAsync As Task
  overload: Runly.Client.IResultsConnection.StartAsync*
- uid: Runly.Client.IResultsConnection.InvokeCoreAsync(System.String,System.Object[])
  commentId: M:Runly.Client.IResultsConnection.InvokeCoreAsync(System.String,System.Object[])
  id: InvokeCoreAsync(System.String,System.Object[])
  parent: Runly.Client.IResultsConnection
  langs:
  - csharp
  - vb
  name: InvokeCoreAsync(String, Object[])
  nameWithType: IResultsConnection.InvokeCoreAsync(String, Object[])
  fullName: Runly.Client.IResultsConnection.InvokeCoreAsync(System.String, System.Object[])
  type: Method
  source:
    id: InvokeCoreAsync
    path: /github/workspace/src/Runly/Client/ResultsChannel.cs
    startLine: 450
  assemblies:
  - Runly
  namespace: Runly.Client
  summary: "\nInvokes a hub method on the server.\n"
  example: []
  syntax:
    content: Task InvokeCoreAsync(string method, object[] args)
    parameters:
    - id: method
      type: System.String
      description: The name of the server method to invoke.
    - id: args
      type: System.Object[]
      description: The arguments used to invoke the server method.
    return:
      type: Task
    content.vb: Function InvokeCoreAsync(method As String, args As Object()) As Task
  overload: Runly.Client.IResultsConnection.InvokeCoreAsync*
  nameWithType.vb: IResultsConnection.InvokeCoreAsync(String, Object())
  fullName.vb: Runly.Client.IResultsConnection.InvokeCoreAsync(System.String, System.Object())
  name.vb: InvokeCoreAsync(String, Object())
- uid: Runly.Client.IResultsConnection.SendCoreAsync(System.String,System.Object[])
  commentId: M:Runly.Client.IResultsConnection.SendCoreAsync(System.String,System.Object[])
  id: SendCoreAsync(System.String,System.Object[])
  parent: Runly.Client.IResultsConnection
  langs:
  - csharp
  - vb
  name: SendCoreAsync(String, Object[])
  nameWithType: IResultsConnection.SendCoreAsync(String, Object[])
  fullName: Runly.Client.IResultsConnection.SendCoreAsync(System.String, System.Object[])
  type: Method
  source:
    id: SendCoreAsync
    path: /github/workspace/src/Runly/Client/ResultsChannel.cs
    startLine: 457
  assemblies:
  - Runly
  namespace: Runly.Client
  summary: "\nInvokes a hub method on the server. Does not wait to a response from the receiver.\n"
  example: []
  syntax:
    content: Task SendCoreAsync(string method, object[] args)
    parameters:
    - id: method
      type: System.String
      description: The name of the server method to invoke.
    - id: args
      type: System.Object[]
      description: The arguments used to invoke the server method.
    return:
      type: Task
    content.vb: Function SendCoreAsync(method As String, args As Object()) As Task
  overload: Runly.Client.IResultsConnection.SendCoreAsync*
  nameWithType.vb: IResultsConnection.SendCoreAsync(String, Object())
  fullName.vb: Runly.Client.IResultsConnection.SendCoreAsync(System.String, System.Object())
  name.vb: SendCoreAsync(String, Object())
- uid: Runly.Client.IResultsConnection.On(System.String,Action)
  commentId: M:Runly.Client.IResultsConnection.On(System.String,Action)
  id: On(System.String,Action)
  parent: Runly.Client.IResultsConnection
  langs:
  - csharp
  - vb
  name: On(String, Action)
  nameWithType: IResultsConnection.On(String, Action)
  fullName: Runly.Client.IResultsConnection.On(System.String, Action)
  type: Method
  source:
    id: On
    path: /github/workspace/src/Runly/Client/ResultsChannel.cs
    startLine: 464
  assemblies:
  - Runly
  namespace: Runly.Client
  summary: "\nRegisters a handler that will be invoked when the hub method with the specified name is invoked.\n"
  example: []
  syntax:
    content: IDisposable On(string methodName, Action handler)
    parameters:
    - id: methodName
      type: System.String
      description: The name of the hub method to define.
    - id: handler
      type: Action
      description: The handler that will be raised when the hub method is invoked.
    return:
      type: IDisposable
    content.vb: Function On(methodName As String, handler As Action) As IDisposable
  overload: Runly.Client.IResultsConnection.On*
references:
- uid: Runly.Client
  commentId: N:Runly.Client
  name: Runly.Client
  nameWithType: Runly.Client
  fullName: Runly.Client
- uid: Func{Exception,Task}
  commentId: '!:Func{Exception,Task}'
  definition: Func`2
  name: Func<Exception, Task>
  nameWithType: Func<Exception, Task>
  fullName: Func<Exception, Task>
  nameWithType.vb: Func(Of Exception, Task)
  fullName.vb: Func(Of Exception, Task)
  name.vb: Func(Of Exception, Task)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Func{System.String,Task}
  commentId: '!:Func{System.String,Task}'
  definition: Func`2
  name: Func<String, Task>
  nameWithType: Func<String, Task>
  fullName: Func<System.String, Task>
  nameWithType.vb: Func(Of String, Task)
  fullName.vb: Func(Of System.String, Task)
  name.vb: Func(Of String, Task)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Runly.Client.IResultsConnection.State*
  commentId: Overload:Runly.Client.IResultsConnection.State
  name: State
  nameWithType: IResultsConnection.State
  fullName: Runly.Client.IResultsConnection.State
- uid: HubConnectionState
  isExternal: true
  name: HubConnectionState
  nameWithType: HubConnectionState
  fullName: HubConnectionState
- uid: Runly.Client.IResultsConnection.StartAsync*
  commentId: Overload:Runly.Client.IResultsConnection.StartAsync
  name: StartAsync
  nameWithType: IResultsConnection.StartAsync
  fullName: Runly.Client.IResultsConnection.StartAsync
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: Runly.Client.IResultsConnection.InvokeCoreAsync*
  commentId: Overload:Runly.Client.IResultsConnection.InvokeCoreAsync
  name: InvokeCoreAsync
  nameWithType: IResultsConnection.InvokeCoreAsync
  fullName: Runly.Client.IResultsConnection.InvokeCoreAsync
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Runly.Client.IResultsConnection.SendCoreAsync*
  commentId: Overload:Runly.Client.IResultsConnection.SendCoreAsync
  name: SendCoreAsync
  nameWithType: IResultsConnection.SendCoreAsync
  fullName: Runly.Client.IResultsConnection.SendCoreAsync
- uid: Runly.Client.IResultsConnection.On*
  commentId: Overload:Runly.Client.IResultsConnection.On
  name: On
  nameWithType: IResultsConnection.On
  fullName: Runly.Client.IResultsConnection.On
- uid: Action
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: Action
- uid: IDisposable
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: IDisposable
