### YamlMime:ManagedReference
items:
- uid: Runly.Hosting.ConsoleFormat
  commentId: T:Runly.Hosting.ConsoleFormat
  id: ConsoleFormat
  parent: Runly.Hosting
  children:
  - Runly.Hosting.ConsoleFormat.AsColumns(System.Int32,System.String[])
  - Runly.Hosting.ConsoleFormat.AsPlural(System.Int32,System.String)
  - Runly.Hosting.ConsoleFormat.DoubleLine
  - Runly.Hosting.ConsoleFormat.SingleLine
  langs:
  - csharp
  - vb
  name: ConsoleFormat
  nameWithType: ConsoleFormat
  fullName: Runly.Hosting.ConsoleFormat
  type: Class
  source:
    id: ConsoleFormat
    path: /github/workspace/src/Runly/Hosting/ConsoleFormat.cs
    startLine: 7
  assemblies:
  - Runly
  namespace: Runly.Hosting
  summary: "\nMethods for formatting text written to the <see cref=\"!:System.Console\"></see>.\n"
  example: []
  syntax:
    content: 'public static class ConsoleFormat : object'
    content.vb: >-
      Public Module ConsoleFormat
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Runly.Hosting.ConsoleFormat.DoubleLine
  commentId: P:Runly.Hosting.ConsoleFormat.DoubleLine
  id: DoubleLine
  parent: Runly.Hosting.ConsoleFormat
  langs:
  - csharp
  - vb
  name: DoubleLine
  nameWithType: ConsoleFormat.DoubleLine
  fullName: Runly.Hosting.ConsoleFormat.DoubleLine
  type: Property
  source:
    id: DoubleLine
    path: /github/workspace/src/Runly/Hosting/ConsoleFormat.cs
    startLine: 12
  assemblies:
  - Runly
  namespace: Runly.Hosting
  summary: "\nA double line made up of sixty &apos;=&apos; characters.\n"
  example: []
  syntax:
    content: public static string DoubleLine { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Shared ReadOnly Property DoubleLine As String
  overload: Runly.Hosting.ConsoleFormat.DoubleLine*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Runly.Hosting.ConsoleFormat.SingleLine
  commentId: P:Runly.Hosting.ConsoleFormat.SingleLine
  id: SingleLine
  parent: Runly.Hosting.ConsoleFormat
  langs:
  - csharp
  - vb
  name: SingleLine
  nameWithType: ConsoleFormat.SingleLine
  fullName: Runly.Hosting.ConsoleFormat.SingleLine
  type: Property
  source:
    id: SingleLine
    path: /github/workspace/src/Runly/Hosting/ConsoleFormat.cs
    startLine: 17
  assemblies:
  - Runly
  namespace: Runly.Hosting
  summary: "\nA line made up of sixty &apos;-&apos; characters.\n"
  example: []
  syntax:
    content: public static string SingleLine { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Shared ReadOnly Property SingleLine As String
  overload: Runly.Hosting.ConsoleFormat.SingleLine*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Runly.Hosting.ConsoleFormat.AsPlural(System.Int32,System.String)
  commentId: M:Runly.Hosting.ConsoleFormat.AsPlural(System.Int32,System.String)
  id: AsPlural(System.Int32,System.String)
  parent: Runly.Hosting.ConsoleFormat
  langs:
  - csharp
  - vb
  name: AsPlural(Int32, String)
  nameWithType: ConsoleFormat.AsPlural(Int32, String)
  fullName: Runly.Hosting.ConsoleFormat.AsPlural(System.Int32, System.String)
  type: Method
  source:
    id: AsPlural
    path: /github/workspace/src/Runly/Hosting/ConsoleFormat.cs
    startLine: 22
  assemblies:
  - Runly
  namespace: Runly.Hosting
  summary: "\nReturns the line ending to pluralize a word when the count is not equal to one.\n"
  example: []
  syntax:
    content: public static string AsPlural(int count, string ending = "s")
    parameters:
    - id: count
      type: System.Int32
    - id: ending
      type: System.String
    return:
      type: System.String
    content.vb: Public Shared Function AsPlural(count As Integer, ending As String = "s") As String
  overload: Runly.Hosting.ConsoleFormat.AsPlural*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Runly.Hosting.ConsoleFormat.AsColumns(System.Int32,System.String[])
  commentId: M:Runly.Hosting.ConsoleFormat.AsColumns(System.Int32,System.String[])
  id: AsColumns(System.Int32,System.String[])
  parent: Runly.Hosting.ConsoleFormat
  langs:
  - csharp
  - vb
  name: AsColumns(Int32, String[])
  nameWithType: ConsoleFormat.AsColumns(Int32, String[])
  fullName: Runly.Hosting.ConsoleFormat.AsColumns(System.Int32, System.String[])
  type: Method
  source:
    id: AsColumns
    path: /github/workspace/src/Runly/Hosting/ConsoleFormat.cs
    startLine: 30
  assemblies:
  - Runly
  namespace: Runly.Hosting
  summary: "\nCreates a single line string from the <code data-dev-comment-type=\"paramref\" class=\"paramref\">data</code>, appending space or truncating text to fit it into columns.\n"
  example: []
  syntax:
    content: public static string AsColumns(int width, params string[] data)
    parameters:
    - id: width
      type: System.Int32
      description: The width, in characters, of a single column.
    - id: data
      type: System.String[]
      description: The data to go in each column.
    return:
      type: System.String
      description: A string with the data spaced out into columns.
    content.vb: Public Shared Function AsColumns(width As Integer, ParamArray data As String()) As String
  overload: Runly.Hosting.ConsoleFormat.AsColumns*
  nameWithType.vb: ConsoleFormat.AsColumns(Int32, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Runly.Hosting.ConsoleFormat.AsColumns(System.Int32, System.String())
  name.vb: AsColumns(Int32, String())
references:
- uid: Runly.Hosting
  commentId: N:Runly.Hosting
  name: Runly.Hosting
  nameWithType: Runly.Hosting
  fullName: Runly.Hosting
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Runly.Hosting.ConsoleFormat.DoubleLine*
  commentId: Overload:Runly.Hosting.ConsoleFormat.DoubleLine
  name: DoubleLine
  nameWithType: ConsoleFormat.DoubleLine
  fullName: Runly.Hosting.ConsoleFormat.DoubleLine
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Runly.Hosting.ConsoleFormat.SingleLine*
  commentId: Overload:Runly.Hosting.ConsoleFormat.SingleLine
  name: SingleLine
  nameWithType: ConsoleFormat.SingleLine
  fullName: Runly.Hosting.ConsoleFormat.SingleLine
- uid: Runly.Hosting.ConsoleFormat.AsPlural*
  commentId: Overload:Runly.Hosting.ConsoleFormat.AsPlural
  name: AsPlural
  nameWithType: ConsoleFormat.AsPlural
  fullName: Runly.Hosting.ConsoleFormat.AsPlural
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Runly.Hosting.ConsoleFormat.AsColumns*
  commentId: Overload:Runly.Hosting.ConsoleFormat.AsColumns
  name: AsColumns
  nameWithType: ConsoleFormat.AsColumns
  fullName: Runly.Hosting.ConsoleFormat.AsColumns
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
