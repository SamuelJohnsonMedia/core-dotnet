### YamlMime:ManagedReference
items:
- uid: Runly.IResultsConnection
  commentId: T:Runly.IResultsConnection
  id: IResultsConnection
  parent: Runly
  children:
  - Runly.IResultsConnection.Closed
  - Runly.IResultsConnection.InvokeCoreAsync(System.String,System.Object[])
  - Runly.IResultsConnection.On(System.String,Action)
  - Runly.IResultsConnection.Reconnected
  - Runly.IResultsConnection.Reconnecting
  - Runly.IResultsConnection.SendCoreAsync(System.String,System.Object[])
  - Runly.IResultsConnection.StartAsync
  - Runly.IResultsConnection.State
  langs:
  - csharp
  - vb
  name: IResultsConnection
  nameWithType: IResultsConnection
  fullName: Runly.IResultsConnection
  type: Interface
  source:
    id: IResultsConnection
    path: /github/workspace/src/Runly/ResultsChannel.cs
    startLine: 281
  assemblies:
  - Runly
  namespace: Runly
  syntax:
    content: 'public interface IResultsConnection : IAsyncDisposable'
    content.vb: >-
      Public Interface IResultsConnection
          Inherits IAsyncDisposable
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Runly.IResultsConnection.Closed
  commentId: E:Runly.IResultsConnection.Closed
  id: Closed
  parent: Runly.IResultsConnection
  langs:
  - csharp
  - vb
  name: Closed
  nameWithType: IResultsConnection.Closed
  fullName: Runly.IResultsConnection.Closed
  type: Event
  source:
    id: Closed
    path: /github/workspace/src/Runly/ResultsChannel.cs
    startLine: 283
  assemblies:
  - Runly
  namespace: Runly
  syntax:
    content: event Func<Exception, Task> Closed
    return:
      type: Func{Exception,Task}
    content.vb: Event Closed As Func(Of Exception, Task)
- uid: Runly.IResultsConnection.Reconnected
  commentId: E:Runly.IResultsConnection.Reconnected
  id: Reconnected
  parent: Runly.IResultsConnection
  langs:
  - csharp
  - vb
  name: Reconnected
  nameWithType: IResultsConnection.Reconnected
  fullName: Runly.IResultsConnection.Reconnected
  type: Event
  source:
    id: Reconnected
    path: /github/workspace/src/Runly/ResultsChannel.cs
    startLine: 284
  assemblies:
  - Runly
  namespace: Runly
  syntax:
    content: event Func<string, Task> Reconnected
    return:
      type: Func{System.String,Task}
    content.vb: Event Reconnected As Func(Of String, Task)
- uid: Runly.IResultsConnection.Reconnecting
  commentId: E:Runly.IResultsConnection.Reconnecting
  id: Reconnecting
  parent: Runly.IResultsConnection
  langs:
  - csharp
  - vb
  name: Reconnecting
  nameWithType: IResultsConnection.Reconnecting
  fullName: Runly.IResultsConnection.Reconnecting
  type: Event
  source:
    id: Reconnecting
    path: /github/workspace/src/Runly/ResultsChannel.cs
    startLine: 285
  assemblies:
  - Runly
  namespace: Runly
  syntax:
    content: event Func<Exception, Task> Reconnecting
    return:
      type: Func{Exception,Task}
    content.vb: Event Reconnecting As Func(Of Exception, Task)
- uid: Runly.IResultsConnection.State
  commentId: P:Runly.IResultsConnection.State
  id: State
  parent: Runly.IResultsConnection
  langs:
  - csharp
  - vb
  name: State
  nameWithType: IResultsConnection.State
  fullName: Runly.IResultsConnection.State
  type: Property
  source:
    id: State
    path: /github/workspace/src/Runly/ResultsChannel.cs
    startLine: 287
  assemblies:
  - Runly
  namespace: Runly
  syntax:
    content: HubConnectionState State { get; }
    parameters: []
    return:
      type: HubConnectionState
    content.vb: ReadOnly Property State As HubConnectionState
  overload: Runly.IResultsConnection.State*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Runly.IResultsConnection.StartAsync
  commentId: M:Runly.IResultsConnection.StartAsync
  id: StartAsync
  parent: Runly.IResultsConnection
  langs:
  - csharp
  - vb
  name: StartAsync()
  nameWithType: IResultsConnection.StartAsync()
  fullName: Runly.IResultsConnection.StartAsync()
  type: Method
  source:
    id: StartAsync
    path: /github/workspace/src/Runly/ResultsChannel.cs
    startLine: 289
  assemblies:
  - Runly
  namespace: Runly
  syntax:
    content: Task StartAsync()
    return:
      type: Task
    content.vb: Function StartAsync As Task
  overload: Runly.IResultsConnection.StartAsync*
- uid: Runly.IResultsConnection.InvokeCoreAsync(System.String,System.Object[])
  commentId: M:Runly.IResultsConnection.InvokeCoreAsync(System.String,System.Object[])
  id: InvokeCoreAsync(System.String,System.Object[])
  parent: Runly.IResultsConnection
  langs:
  - csharp
  - vb
  name: InvokeCoreAsync(String, Object[])
  nameWithType: IResultsConnection.InvokeCoreAsync(String, Object[])
  fullName: Runly.IResultsConnection.InvokeCoreAsync(System.String, System.Object[])
  type: Method
  source:
    id: InvokeCoreAsync
    path: /github/workspace/src/Runly/ResultsChannel.cs
    startLine: 290
  assemblies:
  - Runly
  namespace: Runly
  syntax:
    content: Task InvokeCoreAsync(string method, object[] args)
    parameters:
    - id: method
      type: System.String
    - id: args
      type: System.Object[]
    return:
      type: Task
    content.vb: Function InvokeCoreAsync(method As String, args As Object()) As Task
  overload: Runly.IResultsConnection.InvokeCoreAsync*
  nameWithType.vb: IResultsConnection.InvokeCoreAsync(String, Object())
  fullName.vb: Runly.IResultsConnection.InvokeCoreAsync(System.String, System.Object())
  name.vb: InvokeCoreAsync(String, Object())
- uid: Runly.IResultsConnection.SendCoreAsync(System.String,System.Object[])
  commentId: M:Runly.IResultsConnection.SendCoreAsync(System.String,System.Object[])
  id: SendCoreAsync(System.String,System.Object[])
  parent: Runly.IResultsConnection
  langs:
  - csharp
  - vb
  name: SendCoreAsync(String, Object[])
  nameWithType: IResultsConnection.SendCoreAsync(String, Object[])
  fullName: Runly.IResultsConnection.SendCoreAsync(System.String, System.Object[])
  type: Method
  source:
    id: SendCoreAsync
    path: /github/workspace/src/Runly/ResultsChannel.cs
    startLine: 291
  assemblies:
  - Runly
  namespace: Runly
  syntax:
    content: Task SendCoreAsync(string method, object[] args)
    parameters:
    - id: method
      type: System.String
    - id: args
      type: System.Object[]
    return:
      type: Task
    content.vb: Function SendCoreAsync(method As String, args As Object()) As Task
  overload: Runly.IResultsConnection.SendCoreAsync*
  nameWithType.vb: IResultsConnection.SendCoreAsync(String, Object())
  fullName.vb: Runly.IResultsConnection.SendCoreAsync(System.String, System.Object())
  name.vb: SendCoreAsync(String, Object())
- uid: Runly.IResultsConnection.On(System.String,Action)
  commentId: M:Runly.IResultsConnection.On(System.String,Action)
  id: On(System.String,Action)
  parent: Runly.IResultsConnection
  langs:
  - csharp
  - vb
  name: On(String, Action)
  nameWithType: IResultsConnection.On(String, Action)
  fullName: Runly.IResultsConnection.On(System.String, Action)
  type: Method
  source:
    id: On
    path: /github/workspace/src/Runly/ResultsChannel.cs
    startLine: 292
  assemblies:
  - Runly
  namespace: Runly
  syntax:
    content: IDisposable On(string methodName, Action handler)
    parameters:
    - id: methodName
      type: System.String
    - id: handler
      type: Action
    return:
      type: IDisposable
    content.vb: Function On(methodName As String, handler As Action) As IDisposable
  overload: Runly.IResultsConnection.On*
references:
- uid: Runly
  commentId: N:Runly
  name: Runly
  nameWithType: Runly
  fullName: Runly
- uid: Func{Exception,Task}
  commentId: '!:Func{Exception,Task}'
  definition: Func`2
  name: Func<Exception, Task>
  nameWithType: Func<Exception, Task>
  fullName: Func<Exception, Task>
  nameWithType.vb: Func(Of Exception, Task)
  fullName.vb: Func(Of Exception, Task)
  name.vb: Func(Of Exception, Task)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Func{System.String,Task}
  commentId: '!:Func{System.String,Task}'
  definition: Func`2
  name: Func<String, Task>
  nameWithType: Func<String, Task>
  fullName: Func<System.String, Task>
  nameWithType.vb: Func(Of String, Task)
  fullName.vb: Func(Of System.String, Task)
  name.vb: Func(Of String, Task)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Runly.IResultsConnection.State*
  commentId: Overload:Runly.IResultsConnection.State
  name: State
  nameWithType: IResultsConnection.State
  fullName: Runly.IResultsConnection.State
- uid: HubConnectionState
  isExternal: true
  name: HubConnectionState
  nameWithType: HubConnectionState
  fullName: HubConnectionState
- uid: Runly.IResultsConnection.StartAsync*
  commentId: Overload:Runly.IResultsConnection.StartAsync
  name: StartAsync
  nameWithType: IResultsConnection.StartAsync
  fullName: Runly.IResultsConnection.StartAsync
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: Runly.IResultsConnection.InvokeCoreAsync*
  commentId: Overload:Runly.IResultsConnection.InvokeCoreAsync
  name: InvokeCoreAsync
  nameWithType: IResultsConnection.InvokeCoreAsync
  fullName: Runly.IResultsConnection.InvokeCoreAsync
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object[]
  isExternal: true
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullName.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Runly.IResultsConnection.SendCoreAsync*
  commentId: Overload:Runly.IResultsConnection.SendCoreAsync
  name: SendCoreAsync
  nameWithType: IResultsConnection.SendCoreAsync
  fullName: Runly.IResultsConnection.SendCoreAsync
- uid: Runly.IResultsConnection.On*
  commentId: Overload:Runly.IResultsConnection.On
  name: On
  nameWithType: IResultsConnection.On
  fullName: Runly.IResultsConnection.On
- uid: Action
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: Action
- uid: IDisposable
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: IDisposable
