### YamlMime:ManagedReference
items:
- uid: Runly.Job`3
  commentId: T:Runly.Job`3
  id: Job`3
  parent: Runly
  children:
  - Runly.Job`3.#ctor(`0)
  - Runly.Job`3.GetExecution(IServiceProvider)
  - Runly.Job`3.ProcessAsync(`1,`2)
  langs:
  - csharp
  - vb
  name: Job<TConfig, TItem, T1>
  nameWithType: Job<TConfig, TItem, T1>
  fullName: Runly.Job<TConfig, TItem, T1>
  type: Class
  source:
    id: Job
    path: /github/workspace/src/Runly/Job.cs
    startLine: 52
  assemblies:
  - Runly
  namespace: Runly
  summary: "\nA <see cref=\"!:Task\"></see>-based asynchronous job with one dependency.\n"
  example: []
  syntax:
    content: 'public abstract class Job<TConfig, TItem, T1> : JobBase<TConfig, TItem>, IJob, IItemSource<TItem> where TConfig : Config'
    typeParameters:
    - id: TConfig
      description: The configuration for the job.
    - id: TItem
      description: The data required to process each item.
    - id: T1
      description: A dependency passed into the ProcessAsync method.
    content.vb: >-
      Public MustInherit Class Job(Of TConfig As Config, TItem, T1)
          Inherits JobBase(Of TConfig, TItem)
          Implements IJob, IItemSource(Of TItem)
  inheritance:
  - System.Object
  - Runly.JobBase{{TConfig}}
  - Runly.JobBase{{TConfig},{TItem}}
  implements:
  - Runly.IJob
  - Runly.Processing.IItemSource{{TItem}}
  inheritedMembers:
  - Runly.JobBase{{TConfig},{TItem}}.GetItemsAsync
  - Runly.JobBase{{TConfig},{TItem}}.GetItemIdAsync({TItem})
  - Runly.JobBase{{TConfig}}.Config
  - Runly.JobBase{{TConfig}}.Options
  - Runly.JobBase{{TConfig}}.CancellationToken
  - Runly.JobBase{{TConfig}}.Runly#IJob#Config
  - Runly.JobBase{{TConfig}}.Runly#IJob#GetDefaultConfig
  - Runly.JobBase{{TConfig}}.InitializeAsync
  - Runly.JobBase{{TConfig}}.FinalizeAsync(Runly.Disposition)
  nameWithType.vb: Job(Of TConfig, TItem, T1)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Runly.Job(Of TConfig, TItem, T1)
  name.vb: Job(Of TConfig, TItem, T1)
- uid: Runly.Job`3.#ctor(`0)
  commentId: M:Runly.Job`3.#ctor(`0)
  id: '#ctor(`0)'
  parent: Runly.Job`3
  langs:
  - csharp
  - vb
  name: Job(TConfig)
  nameWithType: Job<TConfig, TItem, T1>.Job(TConfig)
  fullName: Runly.Job<TConfig, TItem, T1>.Job(TConfig)
  type: Constructor
  source:
    id: .ctor
    path: /github/workspace/src/Runly/Job.cs
    startLine: 55
  assemblies:
  - Runly
  namespace: Runly
  syntax:
    content: protected Job(TConfig config)
    parameters:
    - id: config
      type: '{TConfig}'
    content.vb: Protected Sub New(config As TConfig)
  overload: Runly.Job`3.#ctor*
  nameWithType.vb: Job(Of TConfig, TItem, T1).Job(TConfig)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Runly.Job(Of TConfig, TItem, T1).Job(TConfig)
- uid: Runly.Job`3.GetExecution(IServiceProvider)
  commentId: M:Runly.Job`3.GetExecution(IServiceProvider)
  id: GetExecution(IServiceProvider)
  parent: Runly.Job`3
  langs:
  - csharp
  - vb
  name: GetExecution(IServiceProvider)
  nameWithType: Job<TConfig, TItem, T1>.GetExecution(IServiceProvider)
  fullName: Runly.Job<TConfig, TItem, T1>.GetExecution(IServiceProvider)
  type: Method
  source:
    id: GetExecution
    path: /github/workspace/src/Runly/Job.cs
    startLine: 58
  assemblies:
  - Runly
  namespace: Runly
  syntax:
    content: protected override Execution GetExecution(IServiceProvider provider)
    parameters:
    - id: provider
      type: IServiceProvider
    return:
      type: Runly.Execution
    content.vb: Protected Overrides Function GetExecution(provider As IServiceProvider) As Execution
  overridden: Runly.JobBase{{TConfig}}.GetExecution(IServiceProvider)
  overload: Runly.Job`3.GetExecution*
  nameWithType.vb: Job(Of TConfig, TItem, T1).GetExecution(IServiceProvider)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: Runly.Job(Of TConfig, TItem, T1).GetExecution(IServiceProvider)
- uid: Runly.Job`3.ProcessAsync(`1,`2)
  commentId: M:Runly.Job`3.ProcessAsync(`1,`2)
  id: ProcessAsync(`1,`2)
  parent: Runly.Job`3
  langs:
  - csharp
  - vb
  name: ProcessAsync(TItem, T1)
  nameWithType: Job<TConfig, TItem, T1>.ProcessAsync(TItem, T1)
  fullName: Runly.Job<TConfig, TItem, T1>.ProcessAsync(TItem, T1)
  type: Method
  source:
    id: ProcessAsync
    path: /github/workspace/src/Runly/Job.cs
    startLine: 60
  assemblies:
  - Runly
  namespace: Runly
  syntax:
    content: public abstract Task<Result> ProcessAsync(TItem item, T1 arg1)
    parameters:
    - id: item
      type: '{TItem}'
    - id: arg1
      type: '{T1}'
    return:
      type: Task{Runly.Result}
    content.vb: Public MustOverride Function ProcessAsync(item As TItem, arg1 As T1) As Task(Of Result)
  overload: Runly.Job`3.ProcessAsync*
  nameWithType.vb: Job(Of TConfig, TItem, T1).ProcessAsync(TItem, T1)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Runly.Job(Of TConfig, TItem, T1).ProcessAsync(TItem, T1)
references:
- uid: Runly
  commentId: N:Runly
  name: Runly
  nameWithType: Runly
  fullName: Runly
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Runly.JobBase{{TConfig}}
  commentId: T:Runly.JobBase{`0}
  parent: Runly
  definition: Runly.JobBase`1
  name: JobBase<TConfig>
  nameWithType: JobBase<TConfig>
  fullName: Runly.JobBase<TConfig>
  nameWithType.vb: JobBase(Of TConfig)
  fullName.vb: Runly.JobBase(Of TConfig)
  name.vb: JobBase(Of TConfig)
  spec.csharp:
  - uid: Runly.JobBase`1
    name: JobBase
    nameWithType: JobBase
    fullName: Runly.JobBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TConfig
    nameWithType: TConfig
    fullName: TConfig
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Runly.JobBase`1
    name: JobBase
    nameWithType: JobBase
    fullName: Runly.JobBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TConfig
    nameWithType: TConfig
    fullName: TConfig
  - name: )
    nameWithType: )
    fullName: )
- uid: Runly.JobBase{{TConfig},{TItem}}
  commentId: T:Runly.JobBase{`0,`1}
  parent: Runly
  definition: Runly.JobBase`2
  name: JobBase<TConfig, TItem>
  nameWithType: JobBase<TConfig, TItem>
  fullName: Runly.JobBase<TConfig, TItem>
  nameWithType.vb: JobBase(Of TConfig, TItem)
  fullName.vb: Runly.JobBase(Of TConfig, TItem)
  name.vb: JobBase(Of TConfig, TItem)
  spec.csharp:
  - uid: Runly.JobBase`2
    name: JobBase
    nameWithType: JobBase
    fullName: Runly.JobBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TConfig
    nameWithType: TConfig
    fullName: TConfig
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Runly.JobBase`2
    name: JobBase
    nameWithType: JobBase
    fullName: Runly.JobBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TConfig
    nameWithType: TConfig
    fullName: TConfig
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
- uid: Runly.IJob
  commentId: T:Runly.IJob
  parent: Runly
  name: IJob
  nameWithType: IJob
  fullName: Runly.IJob
- uid: Runly.Processing.IItemSource{{TItem}}
  commentId: T:Runly.Processing.IItemSource{`1}
  parent: Runly.Processing
  definition: Runly.Processing.IItemSource`1
  name: IItemSource<TItem>
  nameWithType: IItemSource<TItem>
  fullName: Runly.Processing.IItemSource<TItem>
  nameWithType.vb: IItemSource(Of TItem)
  fullName.vb: Runly.Processing.IItemSource(Of TItem)
  name.vb: IItemSource(Of TItem)
  spec.csharp:
  - uid: Runly.Processing.IItemSource`1
    name: IItemSource
    nameWithType: IItemSource
    fullName: Runly.Processing.IItemSource
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Runly.Processing.IItemSource`1
    name: IItemSource
    nameWithType: IItemSource
    fullName: Runly.Processing.IItemSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
- uid: Runly.JobBase{{TConfig},{TItem}}.GetItemsAsync
  commentId: M:Runly.JobBase{`0,`1}.GetItemsAsync
  parent: Runly.JobBase{{TConfig},{TItem}}
  definition: Runly.JobBase`2.GetItemsAsync
  name: GetItemsAsync()
  nameWithType: JobBase<TConfig, TItem>.GetItemsAsync()
  fullName: Runly.JobBase<TConfig, TItem>.GetItemsAsync()
  nameWithType.vb: JobBase(Of TConfig, TItem).GetItemsAsync()
  fullName.vb: Runly.JobBase(Of TConfig, TItem).GetItemsAsync()
  spec.csharp:
  - uid: Runly.JobBase`2.GetItemsAsync
    name: GetItemsAsync
    nameWithType: JobBase<TConfig, TItem>.GetItemsAsync
    fullName: Runly.JobBase<TConfig, TItem>.GetItemsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Runly.JobBase`2.GetItemsAsync
    name: GetItemsAsync
    nameWithType: JobBase(Of TConfig, TItem).GetItemsAsync
    fullName: Runly.JobBase(Of TConfig, TItem).GetItemsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Runly.JobBase{{TConfig},{TItem}}.GetItemIdAsync({TItem})
  commentId: M:Runly.JobBase{`0,`1}.GetItemIdAsync(`1)
  parent: Runly.JobBase{{TConfig},{TItem}}
  definition: Runly.JobBase`2.GetItemIdAsync(`1)
  name: GetItemIdAsync(TItem)
  nameWithType: JobBase<TConfig, TItem>.GetItemIdAsync(TItem)
  fullName: Runly.JobBase<TConfig, TItem>.GetItemIdAsync(TItem)
  nameWithType.vb: JobBase(Of TConfig, TItem).GetItemIdAsync(TItem)
  fullName.vb: Runly.JobBase(Of TConfig, TItem).GetItemIdAsync(TItem)
  spec.csharp:
  - uid: Runly.JobBase`2.GetItemIdAsync(`1)
    name: GetItemIdAsync
    nameWithType: JobBase<TConfig, TItem>.GetItemIdAsync
    fullName: Runly.JobBase<TConfig, TItem>.GetItemIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Runly.JobBase`2.GetItemIdAsync(`1)
    name: GetItemIdAsync
    nameWithType: JobBase(Of TConfig, TItem).GetItemIdAsync
    fullName: Runly.JobBase(Of TConfig, TItem).GetItemIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
- uid: Runly.JobBase{{TConfig}}.Config
  commentId: P:Runly.JobBase{`0}.Config
  parent: Runly.JobBase{{TConfig}}
  definition: Runly.JobBase`1.Config
  name: Config
  nameWithType: JobBase<TConfig>.Config
  fullName: Runly.JobBase<TConfig>.Config
  nameWithType.vb: JobBase(Of TConfig).Config
  fullName.vb: Runly.JobBase(Of TConfig).Config
- uid: Runly.JobBase{{TConfig}}.Options
  commentId: P:Runly.JobBase{`0}.Options
  parent: Runly.JobBase{{TConfig}}
  definition: Runly.JobBase`1.Options
  name: Options
  nameWithType: JobBase<TConfig>.Options
  fullName: Runly.JobBase<TConfig>.Options
  nameWithType.vb: JobBase(Of TConfig).Options
  fullName.vb: Runly.JobBase(Of TConfig).Options
- uid: Runly.JobBase{{TConfig}}.CancellationToken
  commentId: P:Runly.JobBase{`0}.CancellationToken
  parent: Runly.JobBase{{TConfig}}
  definition: Runly.JobBase`1.CancellationToken
  name: CancellationToken
  nameWithType: JobBase<TConfig>.CancellationToken
  fullName: Runly.JobBase<TConfig>.CancellationToken
  nameWithType.vb: JobBase(Of TConfig).CancellationToken
  fullName.vb: Runly.JobBase(Of TConfig).CancellationToken
- uid: Runly.JobBase{{TConfig}}.Runly#IJob#Config
  commentId: P:Runly.JobBase{`0}.Runly#IJob#Config
  parent: Runly.JobBase{{TConfig}}
  definition: Runly.JobBase`1.Runly#IJob#Config
  name: IJob.Config
  nameWithType: JobBase<TConfig>.IJob.Config
  fullName: Runly.JobBase<TConfig>.Runly.IJob.Config
  nameWithType.vb: JobBase(Of TConfig).Runly.IJob.Config
  fullName.vb: Runly.JobBase(Of TConfig).Runly.IJob.Config
  name.vb: Runly.IJob.Config
- uid: Runly.JobBase{{TConfig}}.Runly#IJob#GetDefaultConfig
  commentId: M:Runly.JobBase{`0}.Runly#IJob#GetDefaultConfig
  parent: Runly.JobBase{{TConfig}}
  definition: Runly.JobBase`1.Runly#IJob#GetDefaultConfig
  name: IJob.GetDefaultConfig()
  nameWithType: JobBase<TConfig>.IJob.GetDefaultConfig()
  fullName: Runly.JobBase<TConfig>.Runly.IJob.GetDefaultConfig()
  nameWithType.vb: JobBase(Of TConfig).Runly.IJob.GetDefaultConfig()
  fullName.vb: Runly.JobBase(Of TConfig).Runly.IJob.GetDefaultConfig()
  name.vb: Runly.IJob.GetDefaultConfig()
  spec.csharp:
  - uid: Runly.JobBase`1.Runly#IJob#GetDefaultConfig
    name: IJob.GetDefaultConfig
    nameWithType: JobBase<TConfig>.IJob.GetDefaultConfig
    fullName: Runly.JobBase<TConfig>.Runly.IJob.GetDefaultConfig
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Runly.JobBase`1.Runly#IJob#GetDefaultConfig
    name: Runly.IJob.GetDefaultConfig
    nameWithType: JobBase(Of TConfig).Runly.IJob.GetDefaultConfig
    fullName: Runly.JobBase(Of TConfig).Runly.IJob.GetDefaultConfig
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Runly.JobBase{{TConfig}}.InitializeAsync
  commentId: M:Runly.JobBase{`0}.InitializeAsync
  parent: Runly.JobBase{{TConfig}}
  definition: Runly.JobBase`1.InitializeAsync
  name: InitializeAsync()
  nameWithType: JobBase<TConfig>.InitializeAsync()
  fullName: Runly.JobBase<TConfig>.InitializeAsync()
  nameWithType.vb: JobBase(Of TConfig).InitializeAsync()
  fullName.vb: Runly.JobBase(Of TConfig).InitializeAsync()
  spec.csharp:
  - uid: Runly.JobBase`1.InitializeAsync
    name: InitializeAsync
    nameWithType: JobBase<TConfig>.InitializeAsync
    fullName: Runly.JobBase<TConfig>.InitializeAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Runly.JobBase`1.InitializeAsync
    name: InitializeAsync
    nameWithType: JobBase(Of TConfig).InitializeAsync
    fullName: Runly.JobBase(Of TConfig).InitializeAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Runly.JobBase{{TConfig}}.FinalizeAsync(Runly.Disposition)
  commentId: M:Runly.JobBase{`0}.FinalizeAsync(Runly.Disposition)
  parent: Runly.JobBase{{TConfig}}
  definition: Runly.JobBase`1.FinalizeAsync(Runly.Disposition)
  name: FinalizeAsync(Disposition)
  nameWithType: JobBase<TConfig>.FinalizeAsync(Disposition)
  fullName: Runly.JobBase<TConfig>.FinalizeAsync(Runly.Disposition)
  nameWithType.vb: JobBase(Of TConfig).FinalizeAsync(Disposition)
  fullName.vb: Runly.JobBase(Of TConfig).FinalizeAsync(Runly.Disposition)
  spec.csharp:
  - uid: Runly.JobBase`1.FinalizeAsync(Runly.Disposition)
    name: FinalizeAsync
    nameWithType: JobBase<TConfig>.FinalizeAsync
    fullName: Runly.JobBase<TConfig>.FinalizeAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Runly.Disposition
    name: Disposition
    nameWithType: Disposition
    fullName: Runly.Disposition
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Runly.JobBase`1.FinalizeAsync(Runly.Disposition)
    name: FinalizeAsync
    nameWithType: JobBase(Of TConfig).FinalizeAsync
    fullName: Runly.JobBase(Of TConfig).FinalizeAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Runly.Disposition
    name: Disposition
    nameWithType: Disposition
    fullName: Runly.Disposition
  - name: )
    nameWithType: )
    fullName: )
- uid: Runly.JobBase`1
  commentId: T:Runly.JobBase`1
  name: JobBase<TConfig>
  nameWithType: JobBase<TConfig>
  fullName: Runly.JobBase<TConfig>
  nameWithType.vb: JobBase(Of TConfig)
  fullName.vb: Runly.JobBase(Of TConfig)
  name.vb: JobBase(Of TConfig)
  spec.csharp:
  - uid: Runly.JobBase`1
    name: JobBase
    nameWithType: JobBase
    fullName: Runly.JobBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TConfig
    nameWithType: TConfig
    fullName: TConfig
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Runly.JobBase`1
    name: JobBase
    nameWithType: JobBase
    fullName: Runly.JobBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TConfig
    nameWithType: TConfig
    fullName: TConfig
  - name: )
    nameWithType: )
    fullName: )
- uid: Runly.JobBase`2
  commentId: T:Runly.JobBase`2
  name: JobBase<TConfig, TItem>
  nameWithType: JobBase<TConfig, TItem>
  fullName: Runly.JobBase<TConfig, TItem>
  nameWithType.vb: JobBase(Of TConfig, TItem)
  fullName.vb: Runly.JobBase(Of TConfig, TItem)
  name.vb: JobBase(Of TConfig, TItem)
  spec.csharp:
  - uid: Runly.JobBase`2
    name: JobBase
    nameWithType: JobBase
    fullName: Runly.JobBase
  - name: <
    nameWithType: <
    fullName: <
  - name: TConfig
    nameWithType: TConfig
    fullName: TConfig
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Runly.JobBase`2
    name: JobBase
    nameWithType: JobBase
    fullName: Runly.JobBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TConfig
    nameWithType: TConfig
    fullName: TConfig
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
- uid: Runly.Processing.IItemSource`1
  commentId: T:Runly.Processing.IItemSource`1
  name: IItemSource<TItem>
  nameWithType: IItemSource<TItem>
  fullName: Runly.Processing.IItemSource<TItem>
  nameWithType.vb: IItemSource(Of TItem)
  fullName.vb: Runly.Processing.IItemSource(Of TItem)
  name.vb: IItemSource(Of TItem)
  spec.csharp:
  - uid: Runly.Processing.IItemSource`1
    name: IItemSource
    nameWithType: IItemSource
    fullName: Runly.Processing.IItemSource
  - name: <
    nameWithType: <
    fullName: <
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Runly.Processing.IItemSource`1
    name: IItemSource
    nameWithType: IItemSource
    fullName: Runly.Processing.IItemSource
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
- uid: Runly.Processing
  commentId: N:Runly.Processing
  name: Runly.Processing
  nameWithType: Runly.Processing
  fullName: Runly.Processing
- uid: Runly.JobBase`2.GetItemsAsync
  commentId: M:Runly.JobBase`2.GetItemsAsync
  name: GetItemsAsync()
  nameWithType: JobBase<TConfig, TItem>.GetItemsAsync()
  fullName: Runly.JobBase<TConfig, TItem>.GetItemsAsync()
  nameWithType.vb: JobBase(Of TConfig, TItem).GetItemsAsync()
  fullName.vb: Runly.JobBase(Of TConfig, TItem).GetItemsAsync()
  spec.csharp:
  - uid: Runly.JobBase`2.GetItemsAsync
    name: GetItemsAsync
    nameWithType: JobBase<TConfig, TItem>.GetItemsAsync
    fullName: Runly.JobBase<TConfig, TItem>.GetItemsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Runly.JobBase`2.GetItemsAsync
    name: GetItemsAsync
    nameWithType: JobBase(Of TConfig, TItem).GetItemsAsync
    fullName: Runly.JobBase(Of TConfig, TItem).GetItemsAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Runly.JobBase`2.GetItemIdAsync(`1)
  commentId: M:Runly.JobBase`2.GetItemIdAsync(`1)
  name: GetItemIdAsync(TItem)
  nameWithType: JobBase<TConfig, TItem>.GetItemIdAsync(TItem)
  fullName: Runly.JobBase<TConfig, TItem>.GetItemIdAsync(TItem)
  nameWithType.vb: JobBase(Of TConfig, TItem).GetItemIdAsync(TItem)
  fullName.vb: Runly.JobBase(Of TConfig, TItem).GetItemIdAsync(TItem)
  spec.csharp:
  - uid: Runly.JobBase`2.GetItemIdAsync(`1)
    name: GetItemIdAsync
    nameWithType: JobBase<TConfig, TItem>.GetItemIdAsync
    fullName: Runly.JobBase<TConfig, TItem>.GetItemIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Runly.JobBase`2.GetItemIdAsync(`1)
    name: GetItemIdAsync
    nameWithType: JobBase(Of TConfig, TItem).GetItemIdAsync
    fullName: Runly.JobBase(Of TConfig, TItem).GetItemIdAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
- uid: Runly.JobBase`1.Config
  commentId: P:Runly.JobBase`1.Config
  name: Config
  nameWithType: JobBase<TConfig>.Config
  fullName: Runly.JobBase<TConfig>.Config
  nameWithType.vb: JobBase(Of TConfig).Config
  fullName.vb: Runly.JobBase(Of TConfig).Config
- uid: Runly.JobBase`1.Options
  commentId: P:Runly.JobBase`1.Options
  name: Options
  nameWithType: JobBase<TConfig>.Options
  fullName: Runly.JobBase<TConfig>.Options
  nameWithType.vb: JobBase(Of TConfig).Options
  fullName.vb: Runly.JobBase(Of TConfig).Options
- uid: Runly.JobBase`1.CancellationToken
  commentId: P:Runly.JobBase`1.CancellationToken
  name: CancellationToken
  nameWithType: JobBase<TConfig>.CancellationToken
  fullName: Runly.JobBase<TConfig>.CancellationToken
  nameWithType.vb: JobBase(Of TConfig).CancellationToken
  fullName.vb: Runly.JobBase(Of TConfig).CancellationToken
- uid: Runly.JobBase`1.Runly#IJob#Config
  commentId: P:Runly.JobBase`1.Runly#IJob#Config
  name: IJob.Config
  nameWithType: JobBase<TConfig>.IJob.Config
  fullName: Runly.JobBase<TConfig>.Runly.IJob.Config
  nameWithType.vb: JobBase(Of TConfig).Runly.IJob.Config
  fullName.vb: Runly.JobBase(Of TConfig).Runly.IJob.Config
  name.vb: Runly.IJob.Config
- uid: Runly.JobBase`1.Runly#IJob#GetDefaultConfig
  commentId: M:Runly.JobBase`1.Runly#IJob#GetDefaultConfig
  name: IJob.GetDefaultConfig()
  nameWithType: JobBase<TConfig>.IJob.GetDefaultConfig()
  fullName: Runly.JobBase<TConfig>.Runly.IJob.GetDefaultConfig()
  nameWithType.vb: JobBase(Of TConfig).Runly.IJob.GetDefaultConfig()
  fullName.vb: Runly.JobBase(Of TConfig).Runly.IJob.GetDefaultConfig()
  name.vb: Runly.IJob.GetDefaultConfig()
  spec.csharp:
  - uid: Runly.JobBase`1.Runly#IJob#GetDefaultConfig
    name: IJob.GetDefaultConfig
    nameWithType: JobBase<TConfig>.IJob.GetDefaultConfig
    fullName: Runly.JobBase<TConfig>.Runly.IJob.GetDefaultConfig
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Runly.JobBase`1.Runly#IJob#GetDefaultConfig
    name: Runly.IJob.GetDefaultConfig
    nameWithType: JobBase(Of TConfig).Runly.IJob.GetDefaultConfig
    fullName: Runly.JobBase(Of TConfig).Runly.IJob.GetDefaultConfig
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Runly.JobBase`1.InitializeAsync
  commentId: M:Runly.JobBase`1.InitializeAsync
  name: InitializeAsync()
  nameWithType: JobBase<TConfig>.InitializeAsync()
  fullName: Runly.JobBase<TConfig>.InitializeAsync()
  nameWithType.vb: JobBase(Of TConfig).InitializeAsync()
  fullName.vb: Runly.JobBase(Of TConfig).InitializeAsync()
  spec.csharp:
  - uid: Runly.JobBase`1.InitializeAsync
    name: InitializeAsync
    nameWithType: JobBase<TConfig>.InitializeAsync
    fullName: Runly.JobBase<TConfig>.InitializeAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Runly.JobBase`1.InitializeAsync
    name: InitializeAsync
    nameWithType: JobBase(Of TConfig).InitializeAsync
    fullName: Runly.JobBase(Of TConfig).InitializeAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Runly.JobBase`1.FinalizeAsync(Runly.Disposition)
  commentId: M:Runly.JobBase`1.FinalizeAsync(Runly.Disposition)
  name: FinalizeAsync(Disposition)
  nameWithType: JobBase<TConfig>.FinalizeAsync(Disposition)
  fullName: Runly.JobBase<TConfig>.FinalizeAsync(Runly.Disposition)
  nameWithType.vb: JobBase(Of TConfig).FinalizeAsync(Disposition)
  fullName.vb: Runly.JobBase(Of TConfig).FinalizeAsync(Runly.Disposition)
  spec.csharp:
  - uid: Runly.JobBase`1.FinalizeAsync(Runly.Disposition)
    name: FinalizeAsync
    nameWithType: JobBase<TConfig>.FinalizeAsync
    fullName: Runly.JobBase<TConfig>.FinalizeAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Runly.Disposition
    name: Disposition
    nameWithType: Disposition
    fullName: Runly.Disposition
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Runly.JobBase`1.FinalizeAsync(Runly.Disposition)
    name: FinalizeAsync
    nameWithType: JobBase(Of TConfig).FinalizeAsync
    fullName: Runly.JobBase(Of TConfig).FinalizeAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Runly.Disposition
    name: Disposition
    nameWithType: Disposition
    fullName: Runly.Disposition
  - name: )
    nameWithType: )
    fullName: )
- uid: Runly.Job`3.#ctor*
  commentId: Overload:Runly.Job`3.#ctor
  name: Job
  nameWithType: Job<TConfig, TItem, T1>.Job
  fullName: Runly.Job<TConfig, TItem, T1>.Job
  nameWithType.vb: Job(Of TConfig, TItem, T1).Job
  fullName.vb: Runly.Job(Of TConfig, TItem, T1).Job
- uid: '{TConfig}'
  commentId: '!:TConfig'
  definition: TConfig
  name: TConfig
  nameWithType: TConfig
  fullName: TConfig
- uid: TConfig
  name: TConfig
  nameWithType: TConfig
  fullName: TConfig
- uid: Runly.JobBase{{TConfig}}.GetExecution(IServiceProvider)
  commentId: M:Runly.JobBase{`0}.GetExecution(IServiceProvider)
  parent: Runly.JobBase{{TConfig}}
  definition: Runly.JobBase`1.GetExecution(IServiceProvider)
  name: GetExecution(IServiceProvider)
  nameWithType: JobBase<TConfig>.GetExecution(IServiceProvider)
  fullName: Runly.JobBase<TConfig>.GetExecution(IServiceProvider)
  nameWithType.vb: JobBase(Of TConfig).GetExecution(IServiceProvider)
  fullName.vb: Runly.JobBase(Of TConfig).GetExecution(IServiceProvider)
  spec.csharp:
  - uid: Runly.JobBase`1.GetExecution(IServiceProvider)
    name: GetExecution
    nameWithType: JobBase<TConfig>.GetExecution
    fullName: Runly.JobBase<TConfig>.GetExecution
  - name: (
    nameWithType: (
    fullName: (
  - uid: IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: IServiceProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Runly.JobBase`1.GetExecution(IServiceProvider)
    name: GetExecution
    nameWithType: JobBase(Of TConfig).GetExecution
    fullName: Runly.JobBase(Of TConfig).GetExecution
  - name: (
    nameWithType: (
    fullName: (
  - uid: IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: IServiceProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Runly.Job`3.GetExecution*
  commentId: Overload:Runly.Job`3.GetExecution
  name: GetExecution
  nameWithType: Job<TConfig, TItem, T1>.GetExecution
  fullName: Runly.Job<TConfig, TItem, T1>.GetExecution
  nameWithType.vb: Job(Of TConfig, TItem, T1).GetExecution
  fullName.vb: Runly.Job(Of TConfig, TItem, T1).GetExecution
- uid: IServiceProvider
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: IServiceProvider
- uid: Runly.Execution
  commentId: T:Runly.Execution
  parent: Runly
  name: Execution
  nameWithType: Execution
  fullName: Runly.Execution
- uid: Runly.JobBase`1.GetExecution(IServiceProvider)
  commentId: M:Runly.JobBase`1.GetExecution(IServiceProvider)
  isExternal: true
  name: GetExecution(IServiceProvider)
  nameWithType: JobBase<TConfig>.GetExecution(IServiceProvider)
  fullName: Runly.JobBase<TConfig>.GetExecution(IServiceProvider)
  nameWithType.vb: JobBase(Of TConfig).GetExecution(IServiceProvider)
  fullName.vb: Runly.JobBase(Of TConfig).GetExecution(IServiceProvider)
  spec.csharp:
  - uid: Runly.JobBase`1.GetExecution(IServiceProvider)
    name: GetExecution
    nameWithType: JobBase<TConfig>.GetExecution
    fullName: Runly.JobBase<TConfig>.GetExecution
  - name: (
    nameWithType: (
    fullName: (
  - uid: IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: IServiceProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Runly.JobBase`1.GetExecution(IServiceProvider)
    name: GetExecution
    nameWithType: JobBase(Of TConfig).GetExecution
    fullName: Runly.JobBase(Of TConfig).GetExecution
  - name: (
    nameWithType: (
    fullName: (
  - uid: IServiceProvider
    name: IServiceProvider
    nameWithType: IServiceProvider
    fullName: IServiceProvider
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Runly.Job`3.ProcessAsync*
  commentId: Overload:Runly.Job`3.ProcessAsync
  name: ProcessAsync
  nameWithType: Job<TConfig, TItem, T1>.ProcessAsync
  fullName: Runly.Job<TConfig, TItem, T1>.ProcessAsync
  nameWithType.vb: Job(Of TConfig, TItem, T1).ProcessAsync
  fullName.vb: Runly.Job(Of TConfig, TItem, T1).ProcessAsync
- uid: '{TItem}'
  commentId: '!:TItem'
  definition: TItem
  name: TItem
  nameWithType: TItem
  fullName: TItem
- uid: '{T1}'
  commentId: '!:T1'
  definition: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: Task{Runly.Result}
  commentId: '!:Task{Runly.Result}'
  definition: Task`1
  name: Task<Result>
  nameWithType: Task<Result>
  fullName: Task<Runly.Result>
  nameWithType.vb: Task(Of Result)
  fullName.vb: Task(Of Runly.Result)
  name.vb: Task(Of Result)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Runly.Result
    name: Result
    nameWithType: Result
    fullName: Runly.Result
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Runly.Result
    name: Result
    nameWithType: Result
    fullName: Runly.Result
  - name: )
    nameWithType: )
    fullName: )
- uid: TItem
  name: TItem
  nameWithType: TItem
  fullName: TItem
- uid: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
