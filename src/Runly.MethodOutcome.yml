### YamlMime:ManagedReference
items:
- uid: Runly.MethodOutcome
  commentId: T:Runly.MethodOutcome
  id: MethodOutcome
  parent: Runly
  children:
  - Runly.MethodOutcome.#ctor(Runly.JobMethod,TimeSpan,Exception)
  - Runly.MethodOutcome.#ctor(Runly.JobMethod,TimeSpan,Runly.Error)
  - Runly.MethodOutcome.Duration
  - Runly.MethodOutcome.Error
  - Runly.MethodOutcome.Exception
  - Runly.MethodOutcome.IsSuccessful
  - Runly.MethodOutcome.Method
  - Runly.MethodOutcome.ToString
  langs:
  - csharp
  - vb
  name: MethodOutcome
  nameWithType: MethodOutcome
  fullName: Runly.MethodOutcome
  type: Class
  source:
    id: MethodOutcome
    path: /github/workspace/src/Core/MethodOutcome.cs
    startLine: 8
  assemblies:
  - Runly.Core
  namespace: Runly
  summary: "\nRecords the outcome of a method executed during the run of a job.\n"
  example: []
  syntax:
    content: 'public class MethodOutcome : object'
    content.vb: >-
      Public Class MethodOutcome
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Runly.MethodOutcome.Method
  commentId: P:Runly.MethodOutcome.Method
  id: Method
  parent: Runly.MethodOutcome
  langs:
  - csharp
  - vb
  name: Method
  nameWithType: MethodOutcome.Method
  fullName: Runly.MethodOutcome.Method
  type: Property
  source:
    id: Method
    path: /github/workspace/src/Core/MethodOutcome.cs
    startLine: 15
  assemblies:
  - Runly.Core
  namespace: Runly
  summary: "\nThe method this <xref href=\"Runly.MethodOutcome\" data-throw-if-not-resolved=\"false\"></xref> represents.\n"
  example: []
  syntax:
    content: public JobMethod Method { get; }
    parameters: []
    return:
      type: Runly.JobMethod
    content.vb: Public ReadOnly Property Method As JobMethod
  overload: Runly.MethodOutcome.Method*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Runly.MethodOutcome.IsSuccessful
  commentId: P:Runly.MethodOutcome.IsSuccessful
  id: IsSuccessful
  parent: Runly.MethodOutcome
  langs:
  - csharp
  - vb
  name: IsSuccessful
  nameWithType: MethodOutcome.IsSuccessful
  fullName: Runly.MethodOutcome.IsSuccessful
  type: Property
  source:
    id: IsSuccessful
    path: /github/workspace/src/Core/MethodOutcome.cs
    startLine: 20
  assemblies:
  - Runly.Core
  namespace: Runly
  summary: "\nTrue when the method completed without throwing an exception.\n"
  example: []
  syntax:
    content: public bool IsSuccessful { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsSuccessful As Boolean
  overload: Runly.MethodOutcome.IsSuccessful*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Runly.MethodOutcome.Exception
  commentId: P:Runly.MethodOutcome.Exception
  id: Exception
  parent: Runly.MethodOutcome
  langs:
  - csharp
  - vb
  name: Exception
  nameWithType: MethodOutcome.Exception
  fullName: Runly.MethodOutcome.Exception
  type: Property
  source:
    id: Exception
    path: /github/workspace/src/Core/MethodOutcome.cs
    startLine: 26
  assemblies:
  - Runly.Core
  namespace: Runly
  summary: "\nThe exception thrown by the method, if any.\n"
  example: []
  syntax:
    content: public Exception Exception { get; }
    parameters: []
    return:
      type: Exception
    content.vb: Public ReadOnly Property Exception As Exception
  overload: Runly.MethodOutcome.Exception*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Runly.MethodOutcome.Error
  commentId: P:Runly.MethodOutcome.Error
  id: Error
  parent: Runly.MethodOutcome
  langs:
  - csharp
  - vb
  name: Error
  nameWithType: MethodOutcome.Error
  fullName: Runly.MethodOutcome.Error
  type: Property
  source:
    id: Error
    path: /github/workspace/src/Core/MethodOutcome.cs
    startLine: 40
  assemblies:
  - Runly.Core
  namespace: Runly
  summary: "\nThe error generated by the method, if any.\n"
  example: []
  syntax:
    content: public Error Error { get; }
    parameters: []
    return:
      type: Runly.Error
    content.vb: 'Public ReadOnly Property Error As '
  overload: Runly.MethodOutcome.Error*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Runly.MethodOutcome.Duration
  commentId: P:Runly.MethodOutcome.Duration
  id: Duration
  parent: Runly.MethodOutcome
  langs:
  - csharp
  - vb
  name: Duration
  nameWithType: MethodOutcome.Duration
  fullName: Runly.MethodOutcome.Duration
  type: Property
  source:
    id: Duration
    path: /github/workspace/src/Core/MethodOutcome.cs
    startLine: 45
  assemblies:
  - Runly.Core
  namespace: Runly
  summary: "\nThe time the method took to execute.\n"
  example: []
  syntax:
    content: public TimeSpan Duration { get; }
    parameters: []
    return:
      type: TimeSpan
    content.vb: Public ReadOnly Property Duration As TimeSpan
  overload: Runly.MethodOutcome.Duration*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Runly.MethodOutcome.#ctor(Runly.JobMethod,TimeSpan,Exception)
  commentId: M:Runly.MethodOutcome.#ctor(Runly.JobMethod,TimeSpan,Exception)
  id: '#ctor(Runly.JobMethod,TimeSpan,Exception)'
  parent: Runly.MethodOutcome
  langs:
  - csharp
  - vb
  name: MethodOutcome(JobMethod, TimeSpan, Exception)
  nameWithType: MethodOutcome.MethodOutcome(JobMethod, TimeSpan, Exception)
  fullName: Runly.MethodOutcome.MethodOutcome(Runly.JobMethod, TimeSpan, Exception)
  type: Constructor
  source:
    id: .ctor
    path: /github/workspace/src/Core/MethodOutcome.cs
    startLine: 47
  assemblies:
  - Runly.Core
  namespace: Runly
  syntax:
    content: public MethodOutcome(JobMethod method, TimeSpan duration, Exception ex)
    parameters:
    - id: method
      type: Runly.JobMethod
    - id: duration
      type: TimeSpan
    - id: ex
      type: Exception
    content.vb: Public Sub New(method As JobMethod, duration As TimeSpan, ex As Exception)
  overload: Runly.MethodOutcome.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Runly.MethodOutcome.#ctor(Runly.JobMethod,TimeSpan,Runly.Error)
  commentId: M:Runly.MethodOutcome.#ctor(Runly.JobMethod,TimeSpan,Runly.Error)
  id: '#ctor(Runly.JobMethod,TimeSpan,Runly.Error)'
  parent: Runly.MethodOutcome
  langs:
  - csharp
  - vb
  name: MethodOutcome(JobMethod, TimeSpan, Error)
  nameWithType: MethodOutcome.MethodOutcome(JobMethod, TimeSpan, Error)
  fullName: Runly.MethodOutcome.MethodOutcome(Runly.JobMethod, TimeSpan, Runly.Error)
  type: Constructor
  source:
    id: .ctor
    path: /github/workspace/src/Core/MethodOutcome.cs
    startLine: 54
  assemblies:
  - Runly.Core
  namespace: Runly
  syntax:
    content: public MethodOutcome(JobMethod method, TimeSpan duration, Error error)
    parameters:
    - id: method
      type: Runly.JobMethod
    - id: duration
      type: TimeSpan
    - id: error
      type: Runly.Error
    content.vb: Public Sub New(method As JobMethod, duration As TimeSpan, error As  Error)
  overload: Runly.MethodOutcome.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Runly.MethodOutcome.ToString
  commentId: M:Runly.MethodOutcome.ToString
  id: ToString
  parent: Runly.MethodOutcome
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: MethodOutcome.ToString()
  fullName: Runly.MethodOutcome.ToString()
  type: Method
  source:
    id: ToString
    path: /github/workspace/src/Core/MethodOutcome.cs
    startLine: 62
  assemblies:
  - Runly.Core
  namespace: Runly
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overload: Runly.MethodOutcome.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Runly
  commentId: N:Runly
  name: Runly
  nameWithType: Runly
  fullName: Runly
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Runly.MethodOutcome
  commentId: T:Runly.MethodOutcome
  parent: Runly
  name: MethodOutcome
  nameWithType: MethodOutcome
  fullName: Runly.MethodOutcome
- uid: Runly.MethodOutcome.Method*
  commentId: Overload:Runly.MethodOutcome.Method
  name: Method
  nameWithType: MethodOutcome.Method
  fullName: Runly.MethodOutcome.Method
- uid: Runly.JobMethod
  commentId: T:Runly.JobMethod
  parent: Runly
  name: JobMethod
  nameWithType: JobMethod
  fullName: Runly.JobMethod
- uid: Runly.MethodOutcome.IsSuccessful*
  commentId: Overload:Runly.MethodOutcome.IsSuccessful
  name: IsSuccessful
  nameWithType: MethodOutcome.IsSuccessful
  fullName: Runly.MethodOutcome.IsSuccessful
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Runly.MethodOutcome.Exception*
  commentId: Overload:Runly.MethodOutcome.Exception
  name: Exception
  nameWithType: MethodOutcome.Exception
  fullName: Runly.MethodOutcome.Exception
- uid: Exception
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: Exception
- uid: Runly.MethodOutcome.Error*
  commentId: Overload:Runly.MethodOutcome.Error
  name: Error
  nameWithType: MethodOutcome.Error
  fullName: Runly.MethodOutcome.Error
- uid: Runly.Error
  commentId: T:Runly.Error
  parent: Runly
  name: Error
  nameWithType: Error
  fullName: Runly.Error
- uid: Runly.MethodOutcome.Duration*
  commentId: Overload:Runly.MethodOutcome.Duration
  name: Duration
  nameWithType: MethodOutcome.Duration
  fullName: Runly.MethodOutcome.Duration
- uid: TimeSpan
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: TimeSpan
- uid: Runly.MethodOutcome.#ctor*
  commentId: Overload:Runly.MethodOutcome.#ctor
  name: MethodOutcome
  nameWithType: MethodOutcome.MethodOutcome
  fullName: Runly.MethodOutcome.MethodOutcome
- uid: Runly.MethodOutcome.ToString*
  commentId: Overload:Runly.MethodOutcome.ToString
  name: ToString
  nameWithType: MethodOutcome.ToString
  fullName: Runly.MethodOutcome.ToString
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
