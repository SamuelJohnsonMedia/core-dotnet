### YamlMime:ManagedReference
items:
- uid: Runly.ResultsChannel.Connection
  commentId: T:Runly.ResultsChannel.Connection
  id: ResultsChannel.Connection
  parent: Runly
  children:
  - Runly.ResultsChannel.Connection.#ctor(Runly.IResultsConnection,ILogger{Runly.ResultsChannel})
  - Runly.ResultsChannel.Connection.Abort
  - Runly.ResultsChannel.Connection.CancellationRequested
  - Runly.ResultsChannel.Connection.DisposeAsync
  - Runly.ResultsChannel.Connection.ExitApp(System.Int32,System.Boolean,System.Int64)
  - Runly.ResultsChannel.Connection.FailApp(System.Object)
  - Runly.ResultsChannel.Connection.FlushAsync
  - Runly.ResultsChannel.Connection.ItemResult(Runly.ItemResult)
  - Runly.ResultsChannel.Connection.Log(Runly.Models.RunLogType,System.Int32,System.String)
  - Runly.ResultsChannel.Connection.MarkComplete(Runly.Disposition)
  - Runly.ResultsChannel.Connection.MarkComplete(Runly.Disposition,System.Object,IEnumerable{Runly.Models.ItemProgress})
  - Runly.ResultsChannel.Connection.MarkComplete(Runly.Disposition,System.Object,Runly.Models.ItemProgress[])
  - Runly.ResultsChannel.Connection.MaxDelay
  - Runly.ResultsChannel.Connection.MethodResult(Runly.MethodOutcome)
  - Runly.ResultsChannel.Connection.MinDelay
  - Runly.ResultsChannel.Connection.RequireSendConfirmation
  - Runly.ResultsChannel.Connection.SetTotal(System.Int32)
  - Runly.ResultsChannel.Connection.StartApp(System.Int32)
  - Runly.ResultsChannel.Connection.UpdateState(Runly.Models.InstanceState,IEnumerable{Runly.Models.ItemProgress})
  - Runly.ResultsChannel.Connection.UpdateState(Runly.Models.InstanceState,Runly.Models.ItemProgress[])
  langs:
  - csharp
  - vb
  name: ResultsChannel.Connection
  nameWithType: ResultsChannel.Connection
  fullName: Runly.ResultsChannel.Connection
  type: Class
  source:
    id: Connection
    path: /github/workspace/src/Runly/ResultsChannel.cs
    startLine: 63
  assemblies:
  - Runly
  namespace: Runly
  remarks: "\nThe underlying HubConnection is not thread-safe.\nWe need to synchronize access to InvokeCoreAsync\n"
  example: []
  syntax:
    content: 'public class Connection : IAsyncDisposable'
    content.vb: >-
      Public Class Connection
          Inherits IAsyncDisposable
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Runly.ResultsChannel.Connection.MinDelay
  commentId: F:Runly.ResultsChannel.Connection.MinDelay
  id: MinDelay
  parent: Runly.ResultsChannel.Connection
  langs:
  - csharp
  - vb
  name: MinDelay
  nameWithType: ResultsChannel.Connection.MinDelay
  fullName: Runly.ResultsChannel.Connection.MinDelay
  type: Field
  source:
    id: MinDelay
    path: /github/workspace/src/Runly/ResultsChannel.cs
    startLine: 65
  assemblies:
  - Runly
  namespace: Runly
  syntax:
    content: public const int MinDelay = null
    return:
      type: System.Int32
    content.vb: Public Const MinDelay As Integer = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Runly.ResultsChannel.Connection.MaxDelay
  commentId: F:Runly.ResultsChannel.Connection.MaxDelay
  id: MaxDelay
  parent: Runly.ResultsChannel.Connection
  langs:
  - csharp
  - vb
  name: MaxDelay
  nameWithType: ResultsChannel.Connection.MaxDelay
  fullName: Runly.ResultsChannel.Connection.MaxDelay
  type: Field
  source:
    id: MaxDelay
    path: /github/workspace/src/Runly/ResultsChannel.cs
    startLine: 65
  assemblies:
  - Runly
  namespace: Runly
  syntax:
    content: public const int MaxDelay = null
    return:
      type: System.Int32
    content.vb: Public Const MaxDelay As Integer = Nothing
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Runly.ResultsChannel.Connection.CancellationRequested
  commentId: E:Runly.ResultsChannel.Connection.CancellationRequested
  id: CancellationRequested
  parent: Runly.ResultsChannel.Connection
  langs:
  - csharp
  - vb
  name: CancellationRequested
  nameWithType: ResultsChannel.Connection.CancellationRequested
  fullName: Runly.ResultsChannel.Connection.CancellationRequested
  type: Event
  source:
    id: CancellationRequested
    path: /github/workspace/src/Runly/ResultsChannel.cs
    startLine: 70
  assemblies:
  - Runly
  namespace: Runly
  syntax:
    content: public event Func<Task> CancellationRequested
    return:
      type: Func{Task}
    content.vb: Public Event CancellationRequested As Func(Of Task)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Runly.ResultsChannel.Connection.RequireSendConfirmation
  commentId: P:Runly.ResultsChannel.Connection.RequireSendConfirmation
  id: RequireSendConfirmation
  parent: Runly.ResultsChannel.Connection
  langs:
  - csharp
  - vb
  name: RequireSendConfirmation
  nameWithType: ResultsChannel.Connection.RequireSendConfirmation
  fullName: Runly.ResultsChannel.Connection.RequireSendConfirmation
  type: Property
  source:
    id: RequireSendConfirmation
    path: /github/workspace/src/Runly/ResultsChannel.cs
    startLine: 83
  assemblies:
  - Runly
  namespace: Runly
  summary: "\nWhen true, every message sent to the server will require a confirmation when \nit has been processed. Enabling this feature will create a performance hit but\neliminate race conditions that may occur when making unit test assertions.\n"
  example: []
  syntax:
    content: public bool RequireSendConfirmation { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property RequireSendConfirmation As Boolean
  overload: Runly.ResultsChannel.Connection.RequireSendConfirmation*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Runly.ResultsChannel.Connection.#ctor(Runly.IResultsConnection,ILogger{Runly.ResultsChannel})
  commentId: M:Runly.ResultsChannel.Connection.#ctor(Runly.IResultsConnection,ILogger{Runly.ResultsChannel})
  id: '#ctor(Runly.IResultsConnection,ILogger{Runly.ResultsChannel})'
  parent: Runly.ResultsChannel.Connection
  langs:
  - csharp
  - vb
  name: Connection(IResultsConnection, ILogger<ResultsChannel>)
  nameWithType: ResultsChannel.Connection.Connection(IResultsConnection, ILogger<ResultsChannel>)
  fullName: Runly.ResultsChannel.Connection.Connection(Runly.IResultsConnection, ILogger<Runly.ResultsChannel>)
  type: Constructor
  source:
    id: .ctor
    path: /github/workspace/src/Runly/ResultsChannel.cs
    startLine: 85
  assemblies:
  - Runly
  namespace: Runly
  syntax:
    content: public Connection(IResultsConnection conn, ILogger<ResultsChannel> logger)
    parameters:
    - id: conn
      type: Runly.IResultsConnection
    - id: logger
      type: ILogger{Runly.ResultsChannel}
    content.vb: Public Sub New(conn As IResultsConnection, logger As ILogger(Of ResultsChannel))
  overload: Runly.ResultsChannel.Connection.#ctor*
  nameWithType.vb: ResultsChannel.Connection.Connection(IResultsConnection, ILogger(Of ResultsChannel))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Runly.ResultsChannel.Connection.Connection(Runly.IResultsConnection, ILogger(Of Runly.ResultsChannel))
  name.vb: Connection(IResultsConnection, ILogger(Of ResultsChannel))
- uid: Runly.ResultsChannel.Connection.FlushAsync
  commentId: M:Runly.ResultsChannel.Connection.FlushAsync
  id: FlushAsync
  parent: Runly.ResultsChannel.Connection
  langs:
  - csharp
  - vb
  name: FlushAsync()
  nameWithType: ResultsChannel.Connection.FlushAsync()
  fullName: Runly.ResultsChannel.Connection.FlushAsync()
  type: Method
  source:
    id: FlushAsync
    path: /github/workspace/src/Runly/ResultsChannel.cs
    startLine: 124
  assemblies:
  - Runly
  namespace: Runly
  summary: "\nBlocks the caller until all messages in the queue have been sent\n"
  example: []
  syntax:
    content: public Task FlushAsync()
    return:
      type: Task
    content.vb: Public Function FlushAsync As Task
  overload: Runly.ResultsChannel.Connection.FlushAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Runly.ResultsChannel.Connection.StartApp(System.Int32)
  commentId: M:Runly.ResultsChannel.Connection.StartApp(System.Int32)
  id: StartApp(System.Int32)
  parent: Runly.ResultsChannel.Connection
  langs:
  - csharp
  - vb
  name: StartApp(Int32)
  nameWithType: ResultsChannel.Connection.StartApp(Int32)
  fullName: Runly.ResultsChannel.Connection.StartApp(System.Int32)
  type: Method
  source:
    id: StartApp
    path: /github/workspace/src/Runly/ResultsChannel.cs
    startLine: 220
  assemblies:
  - Runly
  namespace: Runly
  syntax:
    content: public Task StartApp(int pid)
    parameters:
    - id: pid
      type: System.Int32
    return:
      type: Task
    content.vb: Public Function StartApp(pid As Integer) As Task
  overload: Runly.ResultsChannel.Connection.StartApp*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Runly.ResultsChannel.Connection.Abort
  commentId: M:Runly.ResultsChannel.Connection.Abort
  id: Abort
  parent: Runly.ResultsChannel.Connection
  langs:
  - csharp
  - vb
  name: Abort()
  nameWithType: ResultsChannel.Connection.Abort()
  fullName: Runly.ResultsChannel.Connection.Abort()
  type: Method
  source:
    id: Abort
    path: /github/workspace/src/Runly/ResultsChannel.cs
    startLine: 222
  assemblies:
  - Runly
  namespace: Runly
  syntax:
    content: public Task Abort()
    return:
      type: Task
    content.vb: Public Function Abort As Task
  overload: Runly.ResultsChannel.Connection.Abort*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Runly.ResultsChannel.Connection.ExitApp(System.Int32,System.Boolean,System.Int64)
  commentId: M:Runly.ResultsChannel.Connection.ExitApp(System.Int32,System.Boolean,System.Int64)
  id: ExitApp(System.Int32,System.Boolean,System.Int64)
  parent: Runly.ResultsChannel.Connection
  langs:
  - csharp
  - vb
  name: ExitApp(Int32, Boolean, Int64)
  nameWithType: ResultsChannel.Connection.ExitApp(Int32, Boolean, Int64)
  fullName: Runly.ResultsChannel.Connection.ExitApp(System.Int32, System.Boolean, System.Int64)
  type: Method
  source:
    id: ExitApp
    path: /github/workspace/src/Runly/ResultsChannel.cs
    startLine: 224
  assemblies:
  - Runly
  namespace: Runly
  syntax:
    content: public Task ExitApp(int exitCode, bool timedOut, long duration)
    parameters:
    - id: exitCode
      type: System.Int32
    - id: timedOut
      type: System.Boolean
    - id: duration
      type: System.Int64
    return:
      type: Task
    content.vb: Public Function ExitApp(exitCode As Integer, timedOut As Boolean, duration As Long) As Task
  overload: Runly.ResultsChannel.Connection.ExitApp*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Runly.ResultsChannel.Connection.FailApp(System.Object)
  commentId: M:Runly.ResultsChannel.Connection.FailApp(System.Object)
  id: FailApp(System.Object)
  parent: Runly.ResultsChannel.Connection
  langs:
  - csharp
  - vb
  name: FailApp(Object)
  nameWithType: ResultsChannel.Connection.FailApp(Object)
  fullName: Runly.ResultsChannel.Connection.FailApp(System.Object)
  type: Method
  source:
    id: FailApp
    path: /github/workspace/src/Runly/ResultsChannel.cs
    startLine: 227
  assemblies:
  - Runly
  namespace: Runly
  syntax:
    content: public Task FailApp(object details)
    parameters:
    - id: details
      type: System.Object
    return:
      type: Task
    content.vb: Public Function FailApp(details As Object) As Task
  overload: Runly.ResultsChannel.Connection.FailApp*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Runly.ResultsChannel.Connection.SetTotal(System.Int32)
  commentId: M:Runly.ResultsChannel.Connection.SetTotal(System.Int32)
  id: SetTotal(System.Int32)
  parent: Runly.ResultsChannel.Connection
  langs:
  - csharp
  - vb
  name: SetTotal(Int32)
  nameWithType: ResultsChannel.Connection.SetTotal(Int32)
  fullName: Runly.ResultsChannel.Connection.SetTotal(System.Int32)
  type: Method
  source:
    id: SetTotal
    path: /github/workspace/src/Runly/ResultsChannel.cs
    startLine: 229
  assemblies:
  - Runly
  namespace: Runly
  syntax:
    content: public Task SetTotal(int total)
    parameters:
    - id: total
      type: System.Int32
    return:
      type: Task
    content.vb: Public Function SetTotal(total As Integer) As Task
  overload: Runly.ResultsChannel.Connection.SetTotal*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Runly.ResultsChannel.Connection.UpdateState(Runly.Models.InstanceState,Runly.Models.ItemProgress[])
  commentId: M:Runly.ResultsChannel.Connection.UpdateState(Runly.Models.InstanceState,Runly.Models.ItemProgress[])
  id: UpdateState(Runly.Models.InstanceState,Runly.Models.ItemProgress[])
  parent: Runly.ResultsChannel.Connection
  langs:
  - csharp
  - vb
  name: UpdateState(InstanceState, ItemProgress[])
  nameWithType: ResultsChannel.Connection.UpdateState(InstanceState, ItemProgress[])
  fullName: Runly.ResultsChannel.Connection.UpdateState(Runly.Models.InstanceState, Runly.Models.ItemProgress[])
  type: Method
  source:
    id: UpdateState
    path: /github/workspace/src/Runly/ResultsChannel.cs
    startLine: 231
  assemblies:
  - Runly
  namespace: Runly
  syntax:
    content: public Task UpdateState(InstanceState state, params ItemProgress[] categories)
    parameters:
    - id: state
      type: Runly.Models.InstanceState
    - id: categories
      type: Runly.Models.ItemProgress[]
    return:
      type: Task
    content.vb: Public Function UpdateState(state As InstanceState, ParamArray categories As ItemProgress()) As Task
  overload: Runly.ResultsChannel.Connection.UpdateState*
  nameWithType.vb: ResultsChannel.Connection.UpdateState(InstanceState, ItemProgress())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Runly.ResultsChannel.Connection.UpdateState(Runly.Models.InstanceState, Runly.Models.ItemProgress())
  name.vb: UpdateState(InstanceState, ItemProgress())
- uid: Runly.ResultsChannel.Connection.UpdateState(Runly.Models.InstanceState,IEnumerable{Runly.Models.ItemProgress})
  commentId: M:Runly.ResultsChannel.Connection.UpdateState(Runly.Models.InstanceState,IEnumerable{Runly.Models.ItemProgress})
  id: UpdateState(Runly.Models.InstanceState,IEnumerable{Runly.Models.ItemProgress})
  parent: Runly.ResultsChannel.Connection
  langs:
  - csharp
  - vb
  name: UpdateState(InstanceState, IEnumerable<ItemProgress>)
  nameWithType: ResultsChannel.Connection.UpdateState(InstanceState, IEnumerable<ItemProgress>)
  fullName: Runly.ResultsChannel.Connection.UpdateState(Runly.Models.InstanceState, IEnumerable<Runly.Models.ItemProgress>)
  type: Method
  source:
    id: UpdateState
    path: /github/workspace/src/Runly/ResultsChannel.cs
    startLine: 234
  assemblies:
  - Runly
  namespace: Runly
  syntax:
    content: public Task UpdateState(InstanceState state, IEnumerable<ItemProgress> categories)
    parameters:
    - id: state
      type: Runly.Models.InstanceState
    - id: categories
      type: IEnumerable{Runly.Models.ItemProgress}
    return:
      type: Task
    content.vb: Public Function UpdateState(state As InstanceState, categories As IEnumerable(Of ItemProgress)) As Task
  overload: Runly.ResultsChannel.Connection.UpdateState*
  nameWithType.vb: ResultsChannel.Connection.UpdateState(InstanceState, IEnumerable(Of ItemProgress))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Runly.ResultsChannel.Connection.UpdateState(Runly.Models.InstanceState, IEnumerable(Of Runly.Models.ItemProgress))
  name.vb: UpdateState(InstanceState, IEnumerable(Of ItemProgress))
- uid: Runly.ResultsChannel.Connection.MethodResult(Runly.MethodOutcome)
  commentId: M:Runly.ResultsChannel.Connection.MethodResult(Runly.MethodOutcome)
  id: MethodResult(Runly.MethodOutcome)
  parent: Runly.ResultsChannel.Connection
  langs:
  - csharp
  - vb
  name: MethodResult(MethodOutcome)
  nameWithType: ResultsChannel.Connection.MethodResult(MethodOutcome)
  fullName: Runly.ResultsChannel.Connection.MethodResult(Runly.MethodOutcome)
  type: Method
  source:
    id: MethodResult
    path: /github/workspace/src/Runly/ResultsChannel.cs
    startLine: 237
  assemblies:
  - Runly
  namespace: Runly
  syntax:
    content: public Task MethodResult(MethodOutcome outcome)
    parameters:
    - id: outcome
      type: Runly.MethodOutcome
    return:
      type: Task
    content.vb: Public Function MethodResult(outcome As MethodOutcome) As Task
  overload: Runly.ResultsChannel.Connection.MethodResult*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Runly.ResultsChannel.Connection.ItemResult(Runly.ItemResult)
  commentId: M:Runly.ResultsChannel.Connection.ItemResult(Runly.ItemResult)
  id: ItemResult(Runly.ItemResult)
  parent: Runly.ResultsChannel.Connection
  langs:
  - csharp
  - vb
  name: ItemResult(ItemResult)
  nameWithType: ResultsChannel.Connection.ItemResult(ItemResult)
  fullName: Runly.ResultsChannel.Connection.ItemResult(Runly.ItemResult)
  type: Method
  source:
    id: ItemResult
    path: /github/workspace/src/Runly/ResultsChannel.cs
    startLine: 239
  assemblies:
  - Runly
  namespace: Runly
  syntax:
    content: public Task ItemResult(ItemResult result)
    parameters:
    - id: result
      type: Runly.ItemResult
    return:
      type: Task
    content.vb: Public Function ItemResult(result As ItemResult) As Task
  overload: Runly.ResultsChannel.Connection.ItemResult*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Runly.ResultsChannel.Connection.Log(Runly.Models.RunLogType,System.Int32,System.String)
  commentId: M:Runly.ResultsChannel.Connection.Log(Runly.Models.RunLogType,System.Int32,System.String)
  id: Log(Runly.Models.RunLogType,System.Int32,System.String)
  parent: Runly.ResultsChannel.Connection
  langs:
  - csharp
  - vb
  name: Log(RunLogType, Int32, String)
  nameWithType: ResultsChannel.Connection.Log(RunLogType, Int32, String)
  fullName: Runly.ResultsChannel.Connection.Log(Runly.Models.RunLogType, System.Int32, System.String)
  type: Method
  source:
    id: Log
    path: /github/workspace/src/Runly/ResultsChannel.cs
    startLine: 241
  assemblies:
  - Runly
  namespace: Runly
  syntax:
    content: public Task Log(RunLogType type, int index, string log)
    parameters:
    - id: type
      type: Runly.Models.RunLogType
    - id: index
      type: System.Int32
    - id: log
      type: System.String
    return:
      type: Task
    content.vb: Public Function Log(type As RunLogType, index As Integer, log As String) As Task
  overload: Runly.ResultsChannel.Connection.Log*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Runly.ResultsChannel.Connection.MarkComplete(Runly.Disposition)
  commentId: M:Runly.ResultsChannel.Connection.MarkComplete(Runly.Disposition)
  id: MarkComplete(Runly.Disposition)
  parent: Runly.ResultsChannel.Connection
  langs:
  - csharp
  - vb
  name: MarkComplete(Disposition)
  nameWithType: ResultsChannel.Connection.MarkComplete(Disposition)
  fullName: Runly.ResultsChannel.Connection.MarkComplete(Runly.Disposition)
  type: Method
  source:
    id: MarkComplete
    path: /github/workspace/src/Runly/ResultsChannel.cs
    startLine: 243
  assemblies:
  - Runly
  namespace: Runly
  syntax:
    content: public Task MarkComplete(Disposition disposition)
    parameters:
    - id: disposition
      type: Runly.Disposition
    return:
      type: Task
    content.vb: Public Function MarkComplete(disposition As Disposition) As Task
  overload: Runly.ResultsChannel.Connection.MarkComplete*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Runly.ResultsChannel.Connection.MarkComplete(Runly.Disposition,System.Object,Runly.Models.ItemProgress[])
  commentId: M:Runly.ResultsChannel.Connection.MarkComplete(Runly.Disposition,System.Object,Runly.Models.ItemProgress[])
  id: MarkComplete(Runly.Disposition,System.Object,Runly.Models.ItemProgress[])
  parent: Runly.ResultsChannel.Connection
  langs:
  - csharp
  - vb
  name: MarkComplete(Disposition, Object, ItemProgress[])
  nameWithType: ResultsChannel.Connection.MarkComplete(Disposition, Object, ItemProgress[])
  fullName: Runly.ResultsChannel.Connection.MarkComplete(Runly.Disposition, System.Object, Runly.Models.ItemProgress[])
  type: Method
  source:
    id: MarkComplete
    path: /github/workspace/src/Runly/ResultsChannel.cs
    startLine: 246
  assemblies:
  - Runly
  namespace: Runly
  syntax:
    content: public Task MarkComplete(Disposition disposition, object output, params ItemProgress[] categories)
    parameters:
    - id: disposition
      type: Runly.Disposition
    - id: output
      type: System.Object
    - id: categories
      type: Runly.Models.ItemProgress[]
    return:
      type: Task
    content.vb: Public Function MarkComplete(disposition As Disposition, output As Object, ParamArray categories As ItemProgress()) As Task
  overload: Runly.ResultsChannel.Connection.MarkComplete*
  nameWithType.vb: ResultsChannel.Connection.MarkComplete(Disposition, Object, ItemProgress())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Runly.ResultsChannel.Connection.MarkComplete(Runly.Disposition, System.Object, Runly.Models.ItemProgress())
  name.vb: MarkComplete(Disposition, Object, ItemProgress())
- uid: Runly.ResultsChannel.Connection.MarkComplete(Runly.Disposition,System.Object,IEnumerable{Runly.Models.ItemProgress})
  commentId: M:Runly.ResultsChannel.Connection.MarkComplete(Runly.Disposition,System.Object,IEnumerable{Runly.Models.ItemProgress})
  id: MarkComplete(Runly.Disposition,System.Object,IEnumerable{Runly.Models.ItemProgress})
  parent: Runly.ResultsChannel.Connection
  langs:
  - csharp
  - vb
  name: MarkComplete(Disposition, Object, IEnumerable<ItemProgress>)
  nameWithType: ResultsChannel.Connection.MarkComplete(Disposition, Object, IEnumerable<ItemProgress>)
  fullName: Runly.ResultsChannel.Connection.MarkComplete(Runly.Disposition, System.Object, IEnumerable<Runly.Models.ItemProgress>)
  type: Method
  source:
    id: MarkComplete
    path: /github/workspace/src/Runly/ResultsChannel.cs
    startLine: 249
  assemblies:
  - Runly
  namespace: Runly
  syntax:
    content: public Task MarkComplete(Disposition disposition, object output, IEnumerable<ItemProgress> categories)
    parameters:
    - id: disposition
      type: Runly.Disposition
    - id: output
      type: System.Object
    - id: categories
      type: IEnumerable{Runly.Models.ItemProgress}
    return:
      type: Task
    content.vb: Public Function MarkComplete(disposition As Disposition, output As Object, categories As IEnumerable(Of ItemProgress)) As Task
  overload: Runly.ResultsChannel.Connection.MarkComplete*
  nameWithType.vb: ResultsChannel.Connection.MarkComplete(Disposition, Object, IEnumerable(Of ItemProgress))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Runly.ResultsChannel.Connection.MarkComplete(Runly.Disposition, System.Object, IEnumerable(Of Runly.Models.ItemProgress))
  name.vb: MarkComplete(Disposition, Object, IEnumerable(Of ItemProgress))
- uid: Runly.ResultsChannel.Connection.DisposeAsync
  commentId: M:Runly.ResultsChannel.Connection.DisposeAsync
  id: DisposeAsync
  parent: Runly.ResultsChannel.Connection
  langs:
  - csharp
  - vb
  name: DisposeAsync()
  nameWithType: ResultsChannel.Connection.DisposeAsync()
  fullName: Runly.ResultsChannel.Connection.DisposeAsync()
  type: Method
  source:
    id: DisposeAsync
    path: /github/workspace/src/Runly/ResultsChannel.cs
    startLine: 252
  assemblies:
  - Runly
  namespace: Runly
  syntax:
    content: public ValueTask DisposeAsync()
    return:
      type: ValueTask
    content.vb: Public Function DisposeAsync As ValueTask
  overload: Runly.ResultsChannel.Connection.DisposeAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Runly
  commentId: N:Runly
  name: Runly
  nameWithType: Runly
  fullName: Runly
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Func{Task}
  commentId: '!:Func{Task}'
  definition: Func`1
  name: Func<Task>
  nameWithType: Func<Task>
  fullName: Func<Task>
  nameWithType.vb: Func(Of Task)
  fullName.vb: Func(Of Task)
  name.vb: Func(Of Task)
  spec.csharp:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`1
  isExternal: true
  name: Func<>
  nameWithType: Func<>
  fullName: Func<>
  nameWithType.vb: Func(Of )
  fullName.vb: Func(Of )
  name.vb: Func(Of )
  spec.csharp:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Runly.ResultsChannel.Connection.RequireSendConfirmation*
  commentId: Overload:Runly.ResultsChannel.Connection.RequireSendConfirmation
  name: RequireSendConfirmation
  nameWithType: ResultsChannel.Connection.RequireSendConfirmation
  fullName: Runly.ResultsChannel.Connection.RequireSendConfirmation
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Runly.ResultsChannel.Connection.#ctor*
  commentId: Overload:Runly.ResultsChannel.Connection.#ctor
  name: Connection
  nameWithType: ResultsChannel.Connection.Connection
  fullName: Runly.ResultsChannel.Connection.Connection
- uid: Runly.IResultsConnection
  commentId: T:Runly.IResultsConnection
  parent: Runly
  name: IResultsConnection
  nameWithType: IResultsConnection
  fullName: Runly.IResultsConnection
- uid: ILogger{Runly.ResultsChannel}
  commentId: '!:ILogger{Runly.ResultsChannel}'
  definition: ILogger`1
  name: ILogger<ResultsChannel>
  nameWithType: ILogger<ResultsChannel>
  fullName: ILogger<Runly.ResultsChannel>
  nameWithType.vb: ILogger(Of ResultsChannel)
  fullName.vb: ILogger(Of Runly.ResultsChannel)
  name.vb: ILogger(Of ResultsChannel)
  spec.csharp:
  - uid: ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Runly.ResultsChannel
    name: ResultsChannel
    nameWithType: ResultsChannel
    fullName: Runly.ResultsChannel
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Runly.ResultsChannel
    name: ResultsChannel
    nameWithType: ResultsChannel
    fullName: Runly.ResultsChannel
  - name: )
    nameWithType: )
    fullName: )
- uid: ILogger`1
  isExternal: true
  name: ILogger<>
  nameWithType: ILogger<>
  fullName: ILogger<>
  nameWithType.vb: ILogger(Of )
  fullName.vb: ILogger(Of )
  name.vb: ILogger(Of )
  spec.csharp:
  - uid: ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Runly.ResultsChannel.Connection.FlushAsync*
  commentId: Overload:Runly.ResultsChannel.Connection.FlushAsync
  name: FlushAsync
  nameWithType: ResultsChannel.Connection.FlushAsync
  fullName: Runly.ResultsChannel.Connection.FlushAsync
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: Runly.ResultsChannel.Connection.StartApp*
  commentId: Overload:Runly.ResultsChannel.Connection.StartApp
  name: StartApp
  nameWithType: ResultsChannel.Connection.StartApp
  fullName: Runly.ResultsChannel.Connection.StartApp
- uid: Runly.ResultsChannel.Connection.Abort*
  commentId: Overload:Runly.ResultsChannel.Connection.Abort
  name: Abort
  nameWithType: ResultsChannel.Connection.Abort
  fullName: Runly.ResultsChannel.Connection.Abort
- uid: Runly.ResultsChannel.Connection.ExitApp*
  commentId: Overload:Runly.ResultsChannel.Connection.ExitApp
  name: ExitApp
  nameWithType: ResultsChannel.Connection.ExitApp
  fullName: Runly.ResultsChannel.Connection.ExitApp
- uid: System.Int64
  commentId: '!:System.Int64'
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Runly.ResultsChannel.Connection.FailApp*
  commentId: Overload:Runly.ResultsChannel.Connection.FailApp
  name: FailApp
  nameWithType: ResultsChannel.Connection.FailApp
  fullName: Runly.ResultsChannel.Connection.FailApp
- uid: Runly.ResultsChannel.Connection.SetTotal*
  commentId: Overload:Runly.ResultsChannel.Connection.SetTotal
  name: SetTotal
  nameWithType: ResultsChannel.Connection.SetTotal
  fullName: Runly.ResultsChannel.Connection.SetTotal
- uid: Runly.ResultsChannel.Connection.UpdateState*
  commentId: Overload:Runly.ResultsChannel.Connection.UpdateState
  name: UpdateState
  nameWithType: ResultsChannel.Connection.UpdateState
  fullName: Runly.ResultsChannel.Connection.UpdateState
- uid: Runly.Models.InstanceState
  commentId: T:Runly.Models.InstanceState
  parent: Runly.Models
  name: InstanceState
  nameWithType: InstanceState
  fullName: Runly.Models.InstanceState
- uid: Runly.Models.ItemProgress[]
  isExternal: true
  name: ItemProgress[]
  nameWithType: ItemProgress[]
  fullName: Runly.Models.ItemProgress[]
  nameWithType.vb: ItemProgress()
  fullName.vb: Runly.Models.ItemProgress()
  name.vb: ItemProgress()
  spec.csharp:
  - uid: Runly.Models.ItemProgress
    name: ItemProgress
    nameWithType: ItemProgress
    fullName: Runly.Models.ItemProgress
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Runly.Models.ItemProgress
    name: ItemProgress
    nameWithType: ItemProgress
    fullName: Runly.Models.ItemProgress
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Runly.Models
  commentId: N:Runly.Models
  name: Runly.Models
  nameWithType: Runly.Models
  fullName: Runly.Models
- uid: IEnumerable{Runly.Models.ItemProgress}
  commentId: '!:IEnumerable{Runly.Models.ItemProgress}'
  definition: IEnumerable`1
  name: IEnumerable<ItemProgress>
  nameWithType: IEnumerable<ItemProgress>
  fullName: IEnumerable<Runly.Models.ItemProgress>
  nameWithType.vb: IEnumerable(Of ItemProgress)
  fullName.vb: IEnumerable(Of Runly.Models.ItemProgress)
  name.vb: IEnumerable(Of ItemProgress)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Runly.Models.ItemProgress
    name: ItemProgress
    nameWithType: ItemProgress
    fullName: Runly.Models.ItemProgress
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Runly.Models.ItemProgress
    name: ItemProgress
    nameWithType: ItemProgress
    fullName: Runly.Models.ItemProgress
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Runly.ResultsChannel.Connection.MethodResult*
  commentId: Overload:Runly.ResultsChannel.Connection.MethodResult
  name: MethodResult
  nameWithType: ResultsChannel.Connection.MethodResult
  fullName: Runly.ResultsChannel.Connection.MethodResult
- uid: Runly.MethodOutcome
  commentId: T:Runly.MethodOutcome
  parent: Runly
  name: MethodOutcome
  nameWithType: MethodOutcome
  fullName: Runly.MethodOutcome
- uid: Runly.ResultsChannel.Connection.ItemResult*
  commentId: Overload:Runly.ResultsChannel.Connection.ItemResult
  name: ItemResult
  nameWithType: ResultsChannel.Connection.ItemResult
  fullName: Runly.ResultsChannel.Connection.ItemResult
- uid: Runly.ItemResult
  commentId: T:Runly.ItemResult
  parent: Runly
  name: ItemResult
  nameWithType: ItemResult
  fullName: Runly.ItemResult
- uid: Runly.ResultsChannel.Connection.Log*
  commentId: Overload:Runly.ResultsChannel.Connection.Log
  name: Log
  nameWithType: ResultsChannel.Connection.Log
  fullName: Runly.ResultsChannel.Connection.Log
- uid: Runly.Models.RunLogType
  commentId: T:Runly.Models.RunLogType
  parent: Runly.Models
  name: RunLogType
  nameWithType: RunLogType
  fullName: Runly.Models.RunLogType
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Runly.ResultsChannel.Connection.MarkComplete*
  commentId: Overload:Runly.ResultsChannel.Connection.MarkComplete
  name: MarkComplete
  nameWithType: ResultsChannel.Connection.MarkComplete
  fullName: Runly.ResultsChannel.Connection.MarkComplete
- uid: Runly.Disposition
  commentId: T:Runly.Disposition
  parent: Runly
  name: Disposition
  nameWithType: Disposition
  fullName: Runly.Disposition
- uid: Runly.ResultsChannel.Connection.DisposeAsync*
  commentId: Overload:Runly.ResultsChannel.Connection.DisposeAsync
  name: DisposeAsync
  nameWithType: ResultsChannel.Connection.DisposeAsync
  fullName: Runly.ResultsChannel.Connection.DisposeAsync
- uid: ValueTask
  isExternal: true
  name: ValueTask
  nameWithType: ValueTask
  fullName: ValueTask
